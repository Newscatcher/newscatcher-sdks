/*
NewsCatcher News API V2

NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 

API version: 1.0.1
Contact: team@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// Model200ResponseSources struct for Model200ResponseSources
type Model200ResponseSources struct {
	Message *string `json:"message,omitempty"`
	Sources []string `json:"sources,omitempty"`
	UserInput *SourcesUserInput `json:"user_input,omitempty"`
}

// NewModel200ResponseSources instantiates a new Model200ResponseSources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel200ResponseSources() *Model200ResponseSources {
	this := Model200ResponseSources{}
	return &this
}

// NewModel200ResponseSourcesWithDefaults instantiates a new Model200ResponseSources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModel200ResponseSourcesWithDefaults() *Model200ResponseSources {
	this := Model200ResponseSources{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Model200ResponseSources) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model200ResponseSources) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Model200ResponseSources) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Model200ResponseSources) SetMessage(v string) {
	o.Message = &v
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Model200ResponseSources) GetSources() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Model200ResponseSources) GetSourcesOk() ([]string, bool) {
	if o == nil || isNil(o.Sources) {
    return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *Model200ResponseSources) HasSources() bool {
	if o != nil && isNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []string and assigns it to the Sources field.
func (o *Model200ResponseSources) SetSources(v []string) {
	o.Sources = v
}

// GetUserInput returns the UserInput field value if set, zero value otherwise.
func (o *Model200ResponseSources) GetUserInput() SourcesUserInput {
	if o == nil || isNil(o.UserInput) {
		var ret SourcesUserInput
		return ret
	}
	return *o.UserInput
}

// GetUserInputOk returns a tuple with the UserInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model200ResponseSources) GetUserInputOk() (*SourcesUserInput, bool) {
	if o == nil || isNil(o.UserInput) {
    return nil, false
	}
	return o.UserInput, true
}

// HasUserInput returns a boolean if a field has been set.
func (o *Model200ResponseSources) HasUserInput() bool {
	if o != nil && !isNil(o.UserInput) {
		return true
	}

	return false
}

// SetUserInput gets a reference to the given SourcesUserInput and assigns it to the UserInput field.
func (o *Model200ResponseSources) SetUserInput(v SourcesUserInput) {
	o.UserInput = &v
}

func (o Model200ResponseSources) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if !isNil(o.UserInput) {
		toSerialize["user_input"] = o.UserInput
	}
	return json.Marshal(toSerialize)
}

type NullableModel200ResponseSources struct {
	value *Model200ResponseSources
	isSet bool
}

func (v NullableModel200ResponseSources) Get() *Model200ResponseSources {
	return v.value
}

func (v *NullableModel200ResponseSources) Set(val *Model200ResponseSources) {
	v.value = val
	v.isSet = true
}

func (v NullableModel200ResponseSources) IsSet() bool {
	return v.isSet
}

func (v *NullableModel200ResponseSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel200ResponseSources(val *Model200ResponseSources) *NullableModel200ResponseSources {
	return &NullableModel200ResponseSources{value: val, isSet: true}
}

func (v NullableModel200ResponseSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel200ResponseSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


