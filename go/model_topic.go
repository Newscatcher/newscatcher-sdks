/*
NewsCatcher News API V2

NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 

API version: 1.0.1
Contact: team@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
	"fmt"
)

// Topic the model 'Topic'
type Topic string

// List of topic
const (
	TOPIC_NEWS Topic = "news"
	TOPIC_SPORT Topic = "sport"
	TOPIC_TECH Topic = "tech"
	TOPIC_WORLD Topic = "world"
	TOPIC_FINANCE Topic = "finance"
	TOPIC_POLITICS Topic = "politics"
	TOPIC_BUSINESS Topic = "business"
	TOPIC_ECONOMICS Topic = "economics"
	TOPIC_ENTERTAINMENT Topic = "entertainment"
	TOPIC_BEAUTY Topic = "beauty"
	TOPIC_TRAVEL Topic = "travel"
	TOPIC_MUSIC Topic = "music"
	TOPIC_FOOD Topic = "food"
	TOPIC_SCIENCE Topic = "science"
	TOPIC_GAMING Topic = "gaming"
)

// All allowed values of Topic enum
var AllowedTopicEnumValues = []Topic{
	"news",
	"sport",
	"tech",
	"world",
	"finance",
	"politics",
	"business",
	"economics",
	"entertainment",
	"beauty",
	"travel",
	"music",
	"food",
	"science",
	"gaming",
}

func (v *Topic) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Topic(value)
	for _, existing := range AllowedTopicEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Topic", value)
}

// NewTopicFromValue returns a pointer to a valid Topic
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTopicFromValue(v string) (*Topic, error) {
	ev := Topic(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Topic: valid values are %v", v, AllowedTopicEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Topic) IsValid() bool {
	for _, existing := range AllowedTopicEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to topic value
func (v Topic) Ptr() *Topic {
	return &v
}

type NullableTopic struct {
	value *Topic
	isSet bool
}

func (v NullableTopic) Get() *Topic {
	return v.value
}

func (v *NullableTopic) Set(val *Topic) {
	v.value = val
	v.isSet = true
}

func (v NullableTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopic(val *Topic) *NullableTopic {
	return &NullableTopic{value: val, isSet: true}
}

func (v NullableTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

