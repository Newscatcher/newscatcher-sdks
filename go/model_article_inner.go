/*
NewsCatcher News API V2

NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 

API version: 1.0.1
Contact: team@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// ArticleInner struct for ArticleInner
type ArticleInner struct {
	Title *string `json:"title,omitempty"`
	Author *string `json:"author,omitempty"`
	PublishedDate *string `json:"published_date,omitempty"`
	PublishedDatePrecision *string `json:"published_date_precision,omitempty"`
	Link *string `json:"link,omitempty"`
	CleanUrl *string `json:"clean_url,omitempty"`
	Excerpt NullableString `json:"excerpt,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Rights *string `json:"rights,omitempty"`
	Rank *int32 `json:"rank,omitempty"`
	Topic *string `json:"topic,omitempty"`
	Country *string `json:"country,omitempty"`
	Language NullableString `json:"language,omitempty"`
	Authors *string `json:"authors,omitempty"`
	IsOpinion *bool `json:"is_opinion,omitempty"`
	TwitterAccount NullableString `json:"twitter_account,omitempty"`
	Score NullableFloat32 `json:"_score,omitempty"`
	Id *string `json:"_id,omitempty"`
}

// NewArticleInner instantiates a new ArticleInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticleInner() *ArticleInner {
	this := ArticleInner{}
	return &this
}

// NewArticleInnerWithDefaults instantiates a new ArticleInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleInnerWithDefaults() *ArticleInner {
	this := ArticleInner{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ArticleInner) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
    return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ArticleInner) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ArticleInner) SetTitle(v string) {
	o.Title = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ArticleInner) GetAuthor() string {
	if o == nil || isNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetAuthorOk() (*string, bool) {
	if o == nil || isNil(o.Author) {
    return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ArticleInner) HasAuthor() bool {
	if o != nil && !isNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *ArticleInner) SetAuthor(v string) {
	o.Author = &v
}

// GetPublishedDate returns the PublishedDate field value if set, zero value otherwise.
func (o *ArticleInner) GetPublishedDate() string {
	if o == nil || isNil(o.PublishedDate) {
		var ret string
		return ret
	}
	return *o.PublishedDate
}

// GetPublishedDateOk returns a tuple with the PublishedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetPublishedDateOk() (*string, bool) {
	if o == nil || isNil(o.PublishedDate) {
    return nil, false
	}
	return o.PublishedDate, true
}

// HasPublishedDate returns a boolean if a field has been set.
func (o *ArticleInner) HasPublishedDate() bool {
	if o != nil && !isNil(o.PublishedDate) {
		return true
	}

	return false
}

// SetPublishedDate gets a reference to the given string and assigns it to the PublishedDate field.
func (o *ArticleInner) SetPublishedDate(v string) {
	o.PublishedDate = &v
}

// GetPublishedDatePrecision returns the PublishedDatePrecision field value if set, zero value otherwise.
func (o *ArticleInner) GetPublishedDatePrecision() string {
	if o == nil || isNil(o.PublishedDatePrecision) {
		var ret string
		return ret
	}
	return *o.PublishedDatePrecision
}

// GetPublishedDatePrecisionOk returns a tuple with the PublishedDatePrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetPublishedDatePrecisionOk() (*string, bool) {
	if o == nil || isNil(o.PublishedDatePrecision) {
    return nil, false
	}
	return o.PublishedDatePrecision, true
}

// HasPublishedDatePrecision returns a boolean if a field has been set.
func (o *ArticleInner) HasPublishedDatePrecision() bool {
	if o != nil && !isNil(o.PublishedDatePrecision) {
		return true
	}

	return false
}

// SetPublishedDatePrecision gets a reference to the given string and assigns it to the PublishedDatePrecision field.
func (o *ArticleInner) SetPublishedDatePrecision(v string) {
	o.PublishedDatePrecision = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *ArticleInner) GetLink() string {
	if o == nil || isNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetLinkOk() (*string, bool) {
	if o == nil || isNil(o.Link) {
    return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *ArticleInner) HasLink() bool {
	if o != nil && !isNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *ArticleInner) SetLink(v string) {
	o.Link = &v
}

// GetCleanUrl returns the CleanUrl field value if set, zero value otherwise.
func (o *ArticleInner) GetCleanUrl() string {
	if o == nil || isNil(o.CleanUrl) {
		var ret string
		return ret
	}
	return *o.CleanUrl
}

// GetCleanUrlOk returns a tuple with the CleanUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetCleanUrlOk() (*string, bool) {
	if o == nil || isNil(o.CleanUrl) {
    return nil, false
	}
	return o.CleanUrl, true
}

// HasCleanUrl returns a boolean if a field has been set.
func (o *ArticleInner) HasCleanUrl() bool {
	if o != nil && !isNil(o.CleanUrl) {
		return true
	}

	return false
}

// SetCleanUrl gets a reference to the given string and assigns it to the CleanUrl field.
func (o *ArticleInner) SetCleanUrl(v string) {
	o.CleanUrl = &v
}

// GetExcerpt returns the Excerpt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArticleInner) GetExcerpt() string {
	if o == nil || isNil(o.Excerpt.Get()) {
		var ret string
		return ret
	}
	return *o.Excerpt.Get()
}

// GetExcerptOk returns a tuple with the Excerpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArticleInner) GetExcerptOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Excerpt.Get(), o.Excerpt.IsSet()
}

// HasExcerpt returns a boolean if a field has been set.
func (o *ArticleInner) HasExcerpt() bool {
	if o != nil && o.Excerpt.IsSet() {
		return true
	}

	return false
}

// SetExcerpt gets a reference to the given NullableString and assigns it to the Excerpt field.
func (o *ArticleInner) SetExcerpt(v string) {
	o.Excerpt.Set(&v)
}
// SetExcerptNil sets the value for Excerpt to be an explicit nil
func (o *ArticleInner) SetExcerptNil() {
	o.Excerpt.Set(nil)
}

// UnsetExcerpt ensures that no value is present for Excerpt, not even an explicit nil
func (o *ArticleInner) UnsetExcerpt() {
	o.Excerpt.Unset()
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *ArticleInner) GetSummary() string {
	if o == nil || isNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetSummaryOk() (*string, bool) {
	if o == nil || isNil(o.Summary) {
    return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *ArticleInner) HasSummary() bool {
	if o != nil && !isNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *ArticleInner) SetSummary(v string) {
	o.Summary = &v
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *ArticleInner) GetRights() string {
	if o == nil || isNil(o.Rights) {
		var ret string
		return ret
	}
	return *o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetRightsOk() (*string, bool) {
	if o == nil || isNil(o.Rights) {
    return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *ArticleInner) HasRights() bool {
	if o != nil && !isNil(o.Rights) {
		return true
	}

	return false
}

// SetRights gets a reference to the given string and assigns it to the Rights field.
func (o *ArticleInner) SetRights(v string) {
	o.Rights = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *ArticleInner) GetRank() int32 {
	if o == nil || isNil(o.Rank) {
		var ret int32
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetRankOk() (*int32, bool) {
	if o == nil || isNil(o.Rank) {
    return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *ArticleInner) HasRank() bool {
	if o != nil && !isNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given int32 and assigns it to the Rank field.
func (o *ArticleInner) SetRank(v int32) {
	o.Rank = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ArticleInner) GetTopic() string {
	if o == nil || isNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetTopicOk() (*string, bool) {
	if o == nil || isNil(o.Topic) {
    return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ArticleInner) HasTopic() bool {
	if o != nil && !isNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *ArticleInner) SetTopic(v string) {
	o.Topic = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ArticleInner) GetCountry() string {
	if o == nil || isNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetCountryOk() (*string, bool) {
	if o == nil || isNil(o.Country) {
    return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ArticleInner) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ArticleInner) SetCountry(v string) {
	o.Country = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArticleInner) GetLanguage() string {
	if o == nil || isNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArticleInner) GetLanguageOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *ArticleInner) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *ArticleInner) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *ArticleInner) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *ArticleInner) UnsetLanguage() {
	o.Language.Unset()
}

// GetAuthors returns the Authors field value if set, zero value otherwise.
func (o *ArticleInner) GetAuthors() string {
	if o == nil || isNil(o.Authors) {
		var ret string
		return ret
	}
	return *o.Authors
}

// GetAuthorsOk returns a tuple with the Authors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetAuthorsOk() (*string, bool) {
	if o == nil || isNil(o.Authors) {
    return nil, false
	}
	return o.Authors, true
}

// HasAuthors returns a boolean if a field has been set.
func (o *ArticleInner) HasAuthors() bool {
	if o != nil && !isNil(o.Authors) {
		return true
	}

	return false
}

// SetAuthors gets a reference to the given string and assigns it to the Authors field.
func (o *ArticleInner) SetAuthors(v string) {
	o.Authors = &v
}

// GetIsOpinion returns the IsOpinion field value if set, zero value otherwise.
func (o *ArticleInner) GetIsOpinion() bool {
	if o == nil || isNil(o.IsOpinion) {
		var ret bool
		return ret
	}
	return *o.IsOpinion
}

// GetIsOpinionOk returns a tuple with the IsOpinion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetIsOpinionOk() (*bool, bool) {
	if o == nil || isNil(o.IsOpinion) {
    return nil, false
	}
	return o.IsOpinion, true
}

// HasIsOpinion returns a boolean if a field has been set.
func (o *ArticleInner) HasIsOpinion() bool {
	if o != nil && !isNil(o.IsOpinion) {
		return true
	}

	return false
}

// SetIsOpinion gets a reference to the given bool and assigns it to the IsOpinion field.
func (o *ArticleInner) SetIsOpinion(v bool) {
	o.IsOpinion = &v
}

// GetTwitterAccount returns the TwitterAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArticleInner) GetTwitterAccount() string {
	if o == nil || isNil(o.TwitterAccount.Get()) {
		var ret string
		return ret
	}
	return *o.TwitterAccount.Get()
}

// GetTwitterAccountOk returns a tuple with the TwitterAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArticleInner) GetTwitterAccountOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TwitterAccount.Get(), o.TwitterAccount.IsSet()
}

// HasTwitterAccount returns a boolean if a field has been set.
func (o *ArticleInner) HasTwitterAccount() bool {
	if o != nil && o.TwitterAccount.IsSet() {
		return true
	}

	return false
}

// SetTwitterAccount gets a reference to the given NullableString and assigns it to the TwitterAccount field.
func (o *ArticleInner) SetTwitterAccount(v string) {
	o.TwitterAccount.Set(&v)
}
// SetTwitterAccountNil sets the value for TwitterAccount to be an explicit nil
func (o *ArticleInner) SetTwitterAccountNil() {
	o.TwitterAccount.Set(nil)
}

// UnsetTwitterAccount ensures that no value is present for TwitterAccount, not even an explicit nil
func (o *ArticleInner) UnsetTwitterAccount() {
	o.TwitterAccount.Unset()
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArticleInner) GetScore() float32 {
	if o == nil || isNil(o.Score.Get()) {
		var ret float32
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArticleInner) GetScoreOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *ArticleInner) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableFloat32 and assigns it to the Score field.
func (o *ArticleInner) SetScore(v float32) {
	o.Score.Set(&v)
}
// SetScoreNil sets the value for Score to be an explicit nil
func (o *ArticleInner) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *ArticleInner) UnsetScore() {
	o.Score.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArticleInner) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleInner) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArticleInner) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArticleInner) SetId(v string) {
	o.Id = &v
}

func (o ArticleInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !isNil(o.PublishedDate) {
		toSerialize["published_date"] = o.PublishedDate
	}
	if !isNil(o.PublishedDatePrecision) {
		toSerialize["published_date_precision"] = o.PublishedDatePrecision
	}
	if !isNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !isNil(o.CleanUrl) {
		toSerialize["clean_url"] = o.CleanUrl
	}
	if o.Excerpt.IsSet() {
		toSerialize["excerpt"] = o.Excerpt.Get()
	}
	if !isNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !isNil(o.Rights) {
		toSerialize["rights"] = o.Rights
	}
	if !isNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	if !isNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if !isNil(o.Authors) {
		toSerialize["authors"] = o.Authors
	}
	if !isNil(o.IsOpinion) {
		toSerialize["is_opinion"] = o.IsOpinion
	}
	if o.TwitterAccount.IsSet() {
		toSerialize["twitter_account"] = o.TwitterAccount.Get()
	}
	if o.Score.IsSet() {
		toSerialize["_score"] = o.Score.Get()
	}
	if !isNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableArticleInner struct {
	value *ArticleInner
	isSet bool
}

func (v NullableArticleInner) Get() *ArticleInner {
	return v.value
}

func (v *NullableArticleInner) Set(val *ArticleInner) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleInner) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleInner(val *ArticleInner) *NullableArticleInner {
	return &NullableArticleInner{value: val, isSet: true}
}

func (v NullableArticleInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


