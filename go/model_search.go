/*
NewsCatcher News API V2

NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 

API version: 1.0.1
Contact: team@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// Search struct for Search
type Search struct {
	// Keyword/keywords you're searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section of the docs for more examples and explanations.
	Q *string `json:"q,omitempty"`
	// The language you want to search in.
	Lang *string `json:"lang,omitempty"`
	// Inverse to the lang parameter.
	NotLang *string `json:"not_lang,omitempty"`
	// Precision of the publication date.
	PublishedDatePrecision *string `json:"published_date_precision,omitempty"`
	// YYYY/mm/dd From which point in time to start the search. The default timezone is UTC.  Defaults to the past week.
	From *string `json:"from,omitempty"`
	// YYYY/mm/dd Until which point in time to search for. The default timezone is UTC.
	To *string `json:"to,omitempty"`
	SearchIn *string `json:"search_in,omitempty"`
	Countries *string `json:"countries,omitempty"`
	NotCountries *string `json:"not_countries,omitempty"`
	Topic *string `json:"topic,omitempty"`
	Sources *string `json:"sources,omitempty"`
	NotSources *string `json:"not_sources,omitempty"`
	RankedOnly *bool `json:"ranked_only,omitempty"`
	// `[0:999999]` The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
	FromRank *int32 `json:"from_rank,omitempty"`
	// `[0:999999]` The upper boundary of the rank of a news website to filter by. 
	ToRank *int32 `json:"to_rank,omitempty"`
	SortBy *string `json:"sort_by,omitempty"`
	PageSize *int32 `json:"page_size,omitempty"`
	Page *int32 `json:"page,omitempty"`
}

// NewSearch instantiates a new Search object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearch() *Search {
	this := Search{}
	return &this
}

// NewSearchWithDefaults instantiates a new Search object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchWithDefaults() *Search {
	this := Search{}
	return &this
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *Search) GetQ() string {
	if o == nil || isNil(o.Q) {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetQOk() (*string, bool) {
	if o == nil || isNil(o.Q) {
    return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *Search) HasQ() bool {
	if o != nil && !isNil(o.Q) {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *Search) SetQ(v string) {
	o.Q = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *Search) GetLang() string {
	if o == nil || isNil(o.Lang) {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetLangOk() (*string, bool) {
	if o == nil || isNil(o.Lang) {
    return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *Search) HasLang() bool {
	if o != nil && !isNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *Search) SetLang(v string) {
	o.Lang = &v
}

// GetNotLang returns the NotLang field value if set, zero value otherwise.
func (o *Search) GetNotLang() string {
	if o == nil || isNil(o.NotLang) {
		var ret string
		return ret
	}
	return *o.NotLang
}

// GetNotLangOk returns a tuple with the NotLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetNotLangOk() (*string, bool) {
	if o == nil || isNil(o.NotLang) {
    return nil, false
	}
	return o.NotLang, true
}

// HasNotLang returns a boolean if a field has been set.
func (o *Search) HasNotLang() bool {
	if o != nil && !isNil(o.NotLang) {
		return true
	}

	return false
}

// SetNotLang gets a reference to the given string and assigns it to the NotLang field.
func (o *Search) SetNotLang(v string) {
	o.NotLang = &v
}

// GetPublishedDatePrecision returns the PublishedDatePrecision field value if set, zero value otherwise.
func (o *Search) GetPublishedDatePrecision() string {
	if o == nil || isNil(o.PublishedDatePrecision) {
		var ret string
		return ret
	}
	return *o.PublishedDatePrecision
}

// GetPublishedDatePrecisionOk returns a tuple with the PublishedDatePrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetPublishedDatePrecisionOk() (*string, bool) {
	if o == nil || isNil(o.PublishedDatePrecision) {
    return nil, false
	}
	return o.PublishedDatePrecision, true
}

// HasPublishedDatePrecision returns a boolean if a field has been set.
func (o *Search) HasPublishedDatePrecision() bool {
	if o != nil && !isNil(o.PublishedDatePrecision) {
		return true
	}

	return false
}

// SetPublishedDatePrecision gets a reference to the given string and assigns it to the PublishedDatePrecision field.
func (o *Search) SetPublishedDatePrecision(v string) {
	o.PublishedDatePrecision = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *Search) GetFrom() string {
	if o == nil || isNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetFromOk() (*string, bool) {
	if o == nil || isNil(o.From) {
    return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *Search) HasFrom() bool {
	if o != nil && !isNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *Search) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *Search) GetTo() string {
	if o == nil || isNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetToOk() (*string, bool) {
	if o == nil || isNil(o.To) {
    return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *Search) HasTo() bool {
	if o != nil && !isNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *Search) SetTo(v string) {
	o.To = &v
}

// GetSearchIn returns the SearchIn field value if set, zero value otherwise.
func (o *Search) GetSearchIn() string {
	if o == nil || isNil(o.SearchIn) {
		var ret string
		return ret
	}
	return *o.SearchIn
}

// GetSearchInOk returns a tuple with the SearchIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetSearchInOk() (*string, bool) {
	if o == nil || isNil(o.SearchIn) {
    return nil, false
	}
	return o.SearchIn, true
}

// HasSearchIn returns a boolean if a field has been set.
func (o *Search) HasSearchIn() bool {
	if o != nil && !isNil(o.SearchIn) {
		return true
	}

	return false
}

// SetSearchIn gets a reference to the given string and assigns it to the SearchIn field.
func (o *Search) SetSearchIn(v string) {
	o.SearchIn = &v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *Search) GetCountries() string {
	if o == nil || isNil(o.Countries) {
		var ret string
		return ret
	}
	return *o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetCountriesOk() (*string, bool) {
	if o == nil || isNil(o.Countries) {
    return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *Search) HasCountries() bool {
	if o != nil && !isNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given string and assigns it to the Countries field.
func (o *Search) SetCountries(v string) {
	o.Countries = &v
}

// GetNotCountries returns the NotCountries field value if set, zero value otherwise.
func (o *Search) GetNotCountries() string {
	if o == nil || isNil(o.NotCountries) {
		var ret string
		return ret
	}
	return *o.NotCountries
}

// GetNotCountriesOk returns a tuple with the NotCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetNotCountriesOk() (*string, bool) {
	if o == nil || isNil(o.NotCountries) {
    return nil, false
	}
	return o.NotCountries, true
}

// HasNotCountries returns a boolean if a field has been set.
func (o *Search) HasNotCountries() bool {
	if o != nil && !isNil(o.NotCountries) {
		return true
	}

	return false
}

// SetNotCountries gets a reference to the given string and assigns it to the NotCountries field.
func (o *Search) SetNotCountries(v string) {
	o.NotCountries = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *Search) GetTopic() string {
	if o == nil || isNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetTopicOk() (*string, bool) {
	if o == nil || isNil(o.Topic) {
    return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *Search) HasTopic() bool {
	if o != nil && !isNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *Search) SetTopic(v string) {
	o.Topic = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *Search) GetSources() string {
	if o == nil || isNil(o.Sources) {
		var ret string
		return ret
	}
	return *o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetSourcesOk() (*string, bool) {
	if o == nil || isNil(o.Sources) {
    return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *Search) HasSources() bool {
	if o != nil && !isNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given string and assigns it to the Sources field.
func (o *Search) SetSources(v string) {
	o.Sources = &v
}

// GetNotSources returns the NotSources field value if set, zero value otherwise.
func (o *Search) GetNotSources() string {
	if o == nil || isNil(o.NotSources) {
		var ret string
		return ret
	}
	return *o.NotSources
}

// GetNotSourcesOk returns a tuple with the NotSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetNotSourcesOk() (*string, bool) {
	if o == nil || isNil(o.NotSources) {
    return nil, false
	}
	return o.NotSources, true
}

// HasNotSources returns a boolean if a field has been set.
func (o *Search) HasNotSources() bool {
	if o != nil && !isNil(o.NotSources) {
		return true
	}

	return false
}

// SetNotSources gets a reference to the given string and assigns it to the NotSources field.
func (o *Search) SetNotSources(v string) {
	o.NotSources = &v
}

// GetRankedOnly returns the RankedOnly field value if set, zero value otherwise.
func (o *Search) GetRankedOnly() bool {
	if o == nil || isNil(o.RankedOnly) {
		var ret bool
		return ret
	}
	return *o.RankedOnly
}

// GetRankedOnlyOk returns a tuple with the RankedOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetRankedOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.RankedOnly) {
    return nil, false
	}
	return o.RankedOnly, true
}

// HasRankedOnly returns a boolean if a field has been set.
func (o *Search) HasRankedOnly() bool {
	if o != nil && !isNil(o.RankedOnly) {
		return true
	}

	return false
}

// SetRankedOnly gets a reference to the given bool and assigns it to the RankedOnly field.
func (o *Search) SetRankedOnly(v bool) {
	o.RankedOnly = &v
}

// GetFromRank returns the FromRank field value if set, zero value otherwise.
func (o *Search) GetFromRank() int32 {
	if o == nil || isNil(o.FromRank) {
		var ret int32
		return ret
	}
	return *o.FromRank
}

// GetFromRankOk returns a tuple with the FromRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetFromRankOk() (*int32, bool) {
	if o == nil || isNil(o.FromRank) {
    return nil, false
	}
	return o.FromRank, true
}

// HasFromRank returns a boolean if a field has been set.
func (o *Search) HasFromRank() bool {
	if o != nil && !isNil(o.FromRank) {
		return true
	}

	return false
}

// SetFromRank gets a reference to the given int32 and assigns it to the FromRank field.
func (o *Search) SetFromRank(v int32) {
	o.FromRank = &v
}

// GetToRank returns the ToRank field value if set, zero value otherwise.
func (o *Search) GetToRank() int32 {
	if o == nil || isNil(o.ToRank) {
		var ret int32
		return ret
	}
	return *o.ToRank
}

// GetToRankOk returns a tuple with the ToRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetToRankOk() (*int32, bool) {
	if o == nil || isNil(o.ToRank) {
    return nil, false
	}
	return o.ToRank, true
}

// HasToRank returns a boolean if a field has been set.
func (o *Search) HasToRank() bool {
	if o != nil && !isNil(o.ToRank) {
		return true
	}

	return false
}

// SetToRank gets a reference to the given int32 and assigns it to the ToRank field.
func (o *Search) SetToRank(v int32) {
	o.ToRank = &v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *Search) GetSortBy() string {
	if o == nil || isNil(o.SortBy) {
		var ret string
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetSortByOk() (*string, bool) {
	if o == nil || isNil(o.SortBy) {
    return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *Search) HasSortBy() bool {
	if o != nil && !isNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given string and assigns it to the SortBy field.
func (o *Search) SetSortBy(v string) {
	o.SortBy = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *Search) GetPageSize() int32 {
	if o == nil || isNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetPageSizeOk() (*int32, bool) {
	if o == nil || isNil(o.PageSize) {
    return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *Search) HasPageSize() bool {
	if o != nil && !isNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *Search) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *Search) GetPage() int32 {
	if o == nil || isNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search) GetPageOk() (*int32, bool) {
	if o == nil || isNil(o.Page) {
    return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *Search) HasPage() bool {
	if o != nil && !isNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *Search) SetPage(v int32) {
	o.Page = &v
}

func (o Search) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Q) {
		toSerialize["q"] = o.Q
	}
	if !isNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	if !isNil(o.NotLang) {
		toSerialize["not_lang"] = o.NotLang
	}
	if !isNil(o.PublishedDatePrecision) {
		toSerialize["published_date_precision"] = o.PublishedDatePrecision
	}
	if !isNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !isNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !isNil(o.SearchIn) {
		toSerialize["search_in"] = o.SearchIn
	}
	if !isNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	if !isNil(o.NotCountries) {
		toSerialize["not_countries"] = o.NotCountries
	}
	if !isNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !isNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !isNil(o.NotSources) {
		toSerialize["not_sources"] = o.NotSources
	}
	if !isNil(o.RankedOnly) {
		toSerialize["ranked_only"] = o.RankedOnly
	}
	if !isNil(o.FromRank) {
		toSerialize["from_rank"] = o.FromRank
	}
	if !isNil(o.ToRank) {
		toSerialize["to_rank"] = o.ToRank
	}
	if !isNil(o.SortBy) {
		toSerialize["sort_by"] = o.SortBy
	}
	if !isNil(o.PageSize) {
		toSerialize["page_size"] = o.PageSize
	}
	if !isNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	return json.Marshal(toSerialize)
}

type NullableSearch struct {
	value *Search
	isSet bool
}

func (v NullableSearch) Get() *Search {
	return v.value
}

func (v *NullableSearch) Set(val *Search) {
	v.value = val
	v.isSet = true
}

func (v NullableSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearch(val *Search) *NullableSearch {
	return &NullableSearch{value: val, isSet: true}
}

func (v NullableSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


