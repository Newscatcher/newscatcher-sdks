/*
NewsCatcher News API V2

NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 

API version: 1.0.1
Contact: team@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
	"fmt"
)

// ErrorStatus the model 'ErrorStatus'
type ErrorStatus string

// List of error_status
const (
	ERRORSTATUS_ERROR ErrorStatus = "error"
	ERRORSTATUS_NO_MATCHES_FOR_YOUR_SEARCH ErrorStatus = "No matches for your search."
)

// All allowed values of ErrorStatus enum
var AllowedErrorStatusEnumValues = []ErrorStatus{
	"error",
	"No matches for your search.",
}

func (v *ErrorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorStatus(value)
	for _, existing := range AllowedErrorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorStatus", value)
}

// NewErrorStatusFromValue returns a pointer to a valid ErrorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorStatusFromValue(v string) (*ErrorStatus, error) {
	ev := ErrorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorStatus: valid values are %v", v, AllowedErrorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorStatus) IsValid() bool {
	for _, existing := range AllowedErrorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to error_status value
func (v ErrorStatus) Ptr() *ErrorStatus {
	return &v
}

type NullableErrorStatus struct {
	value *ErrorStatus
	isSet bool
}

func (v NullableErrorStatus) Get() *ErrorStatus {
	return v.value
}

func (v *NullableErrorStatus) Set(val *ErrorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorStatus(val *ErrorStatus) *NullableErrorStatus {
	return &NullableErrorStatus{value: val, isSet: true}
}

func (v NullableErrorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

