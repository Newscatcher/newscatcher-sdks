/*
NewsCatcher News API V2

NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 

API version: 1.0.1
Contact: team@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// LatestHeadlinesUserInput struct for LatestHeadlinesUserInput
type LatestHeadlinesUserInput struct {
	Lang []string `json:"lang,omitempty"`
	NotLang []string `json:"not_lang,omitempty"`
	Countries []string `json:"countries,omitempty"`
	NotCountries []string `json:"not_countries,omitempty"`
	Page *int32 `json:"page,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Sources []string `json:"sources,omitempty"`
	NotSources []string `json:"not_sources,omitempty"`
	Topic NullableString `json:"topic,omitempty"`
}

// NewLatestHeadlinesUserInput instantiates a new LatestHeadlinesUserInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLatestHeadlinesUserInput() *LatestHeadlinesUserInput {
	this := LatestHeadlinesUserInput{}
	return &this
}

// NewLatestHeadlinesUserInputWithDefaults instantiates a new LatestHeadlinesUserInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLatestHeadlinesUserInputWithDefaults() *LatestHeadlinesUserInput {
	this := LatestHeadlinesUserInput{}
	return &this
}

// GetLang returns the Lang field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatestHeadlinesUserInput) GetLang() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestHeadlinesUserInput) GetLangOk() ([]string, bool) {
	if o == nil || isNil(o.Lang) {
    return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasLang() bool {
	if o != nil && isNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given []string and assigns it to the Lang field.
func (o *LatestHeadlinesUserInput) SetLang(v []string) {
	o.Lang = v
}

// GetNotLang returns the NotLang field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatestHeadlinesUserInput) GetNotLang() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NotLang
}

// GetNotLangOk returns a tuple with the NotLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestHeadlinesUserInput) GetNotLangOk() ([]string, bool) {
	if o == nil || isNil(o.NotLang) {
    return nil, false
	}
	return o.NotLang, true
}

// HasNotLang returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasNotLang() bool {
	if o != nil && isNil(o.NotLang) {
		return true
	}

	return false
}

// SetNotLang gets a reference to the given []string and assigns it to the NotLang field.
func (o *LatestHeadlinesUserInput) SetNotLang(v []string) {
	o.NotLang = v
}

// GetCountries returns the Countries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatestHeadlinesUserInput) GetCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestHeadlinesUserInput) GetCountriesOk() ([]string, bool) {
	if o == nil || isNil(o.Countries) {
    return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasCountries() bool {
	if o != nil && isNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *LatestHeadlinesUserInput) SetCountries(v []string) {
	o.Countries = v
}

// GetNotCountries returns the NotCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatestHeadlinesUserInput) GetNotCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NotCountries
}

// GetNotCountriesOk returns a tuple with the NotCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestHeadlinesUserInput) GetNotCountriesOk() ([]string, bool) {
	if o == nil || isNil(o.NotCountries) {
    return nil, false
	}
	return o.NotCountries, true
}

// HasNotCountries returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasNotCountries() bool {
	if o != nil && isNil(o.NotCountries) {
		return true
	}

	return false
}

// SetNotCountries gets a reference to the given []string and assigns it to the NotCountries field.
func (o *LatestHeadlinesUserInput) SetNotCountries(v []string) {
	o.NotCountries = v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *LatestHeadlinesUserInput) GetPage() int32 {
	if o == nil || isNil(o.Page) {
		var ret int32
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatestHeadlinesUserInput) GetPageOk() (*int32, bool) {
	if o == nil || isNil(o.Page) {
    return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasPage() bool {
	if o != nil && !isNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int32 and assigns it to the Page field.
func (o *LatestHeadlinesUserInput) SetPage(v int32) {
	o.Page = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *LatestHeadlinesUserInput) GetSize() int32 {
	if o == nil || isNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatestHeadlinesUserInput) GetSizeOk() (*int32, bool) {
	if o == nil || isNil(o.Size) {
    return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *LatestHeadlinesUserInput) SetSize(v int32) {
	o.Size = &v
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatestHeadlinesUserInput) GetSources() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestHeadlinesUserInput) GetSourcesOk() ([]string, bool) {
	if o == nil || isNil(o.Sources) {
    return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasSources() bool {
	if o != nil && isNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []string and assigns it to the Sources field.
func (o *LatestHeadlinesUserInput) SetSources(v []string) {
	o.Sources = v
}

// GetNotSources returns the NotSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatestHeadlinesUserInput) GetNotSources() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NotSources
}

// GetNotSourcesOk returns a tuple with the NotSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestHeadlinesUserInput) GetNotSourcesOk() ([]string, bool) {
	if o == nil || isNil(o.NotSources) {
    return nil, false
	}
	return o.NotSources, true
}

// HasNotSources returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasNotSources() bool {
	if o != nil && isNil(o.NotSources) {
		return true
	}

	return false
}

// SetNotSources gets a reference to the given []string and assigns it to the NotSources field.
func (o *LatestHeadlinesUserInput) SetNotSources(v []string) {
	o.NotSources = v
}

// GetTopic returns the Topic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatestHeadlinesUserInput) GetTopic() string {
	if o == nil || isNil(o.Topic.Get()) {
		var ret string
		return ret
	}
	return *o.Topic.Get()
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestHeadlinesUserInput) GetTopicOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Topic.Get(), o.Topic.IsSet()
}

// HasTopic returns a boolean if a field has been set.
func (o *LatestHeadlinesUserInput) HasTopic() bool {
	if o != nil && o.Topic.IsSet() {
		return true
	}

	return false
}

// SetTopic gets a reference to the given NullableString and assigns it to the Topic field.
func (o *LatestHeadlinesUserInput) SetTopic(v string) {
	o.Topic.Set(&v)
}
// SetTopicNil sets the value for Topic to be an explicit nil
func (o *LatestHeadlinesUserInput) SetTopicNil() {
	o.Topic.Set(nil)
}

// UnsetTopic ensures that no value is present for Topic, not even an explicit nil
func (o *LatestHeadlinesUserInput) UnsetTopic() {
	o.Topic.Unset()
}

func (o LatestHeadlinesUserInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.NotLang != nil {
		toSerialize["not_lang"] = o.NotLang
	}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.NotCountries != nil {
		toSerialize["not_countries"] = o.NotCountries
	}
	if !isNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if o.NotSources != nil {
		toSerialize["not_sources"] = o.NotSources
	}
	if o.Topic.IsSet() {
		toSerialize["topic"] = o.Topic.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLatestHeadlinesUserInput struct {
	value *LatestHeadlinesUserInput
	isSet bool
}

func (v NullableLatestHeadlinesUserInput) Get() *LatestHeadlinesUserInput {
	return v.value
}

func (v *NullableLatestHeadlinesUserInput) Set(val *LatestHeadlinesUserInput) {
	v.value = val
	v.isSet = true
}

func (v NullableLatestHeadlinesUserInput) IsSet() bool {
	return v.isSet
}

func (v *NullableLatestHeadlinesUserInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLatestHeadlinesUserInput(val *LatestHeadlinesUserInput) *NullableLatestHeadlinesUserInput {
	return &NullableLatestHeadlinesUserInput{value: val, isSet: true}
}

func (v NullableLatestHeadlinesUserInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLatestHeadlinesUserInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


