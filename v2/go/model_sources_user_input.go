/*
NewsCatcher News API V2

NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 

API version: 1.0.1
Contact: team@newscatcherapi.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package newscatcherapi

import (
	"encoding/json"
)

// SourcesUserInput struct for SourcesUserInput
type SourcesUserInput struct {
	Lang []string `json:"lang,omitempty"`
	Countries []string `json:"countries,omitempty"`
	Topic NullableString `json:"topic,omitempty"`
}

// NewSourcesUserInput instantiates a new SourcesUserInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcesUserInput() *SourcesUserInput {
	this := SourcesUserInput{}
	return &this
}

// NewSourcesUserInputWithDefaults instantiates a new SourcesUserInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesUserInputWithDefaults() *SourcesUserInput {
	this := SourcesUserInput{}
	return &this
}

// GetLang returns the Lang field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourcesUserInput) GetLang() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourcesUserInput) GetLangOk() ([]string, bool) {
	if o == nil || isNil(o.Lang) {
    return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *SourcesUserInput) HasLang() bool {
	if o != nil && isNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given []string and assigns it to the Lang field.
func (o *SourcesUserInput) SetLang(v []string) {
	o.Lang = v
}

// GetCountries returns the Countries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourcesUserInput) GetCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourcesUserInput) GetCountriesOk() ([]string, bool) {
	if o == nil || isNil(o.Countries) {
    return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *SourcesUserInput) HasCountries() bool {
	if o != nil && isNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *SourcesUserInput) SetCountries(v []string) {
	o.Countries = v
}

// GetTopic returns the Topic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourcesUserInput) GetTopic() string {
	if o == nil || isNil(o.Topic.Get()) {
		var ret string
		return ret
	}
	return *o.Topic.Get()
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourcesUserInput) GetTopicOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Topic.Get(), o.Topic.IsSet()
}

// HasTopic returns a boolean if a field has been set.
func (o *SourcesUserInput) HasTopic() bool {
	if o != nil && o.Topic.IsSet() {
		return true
	}

	return false
}

// SetTopic gets a reference to the given NullableString and assigns it to the Topic field.
func (o *SourcesUserInput) SetTopic(v string) {
	o.Topic.Set(&v)
}
// SetTopicNil sets the value for Topic to be an explicit nil
func (o *SourcesUserInput) SetTopicNil() {
	o.Topic.Set(nil)
}

// UnsetTopic ensures that no value is present for Topic, not even an explicit nil
func (o *SourcesUserInput) UnsetTopic() {
	o.Topic.Unset()
}

func (o SourcesUserInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.Topic.IsSet() {
		toSerialize["topic"] = o.Topic.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSourcesUserInput struct {
	value *SourcesUserInput
	isSet bool
}

func (v NullableSourcesUserInput) Get() *SourcesUserInput {
	return v.value
}

func (v *NullableSourcesUserInput) Set(val *SourcesUserInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcesUserInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcesUserInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcesUserInput(val *SourcesUserInput) *NullableSourcesUserInput {
	return &NullableSourcesUserInput{value: val, isSet: true}
}

func (v NullableSourcesUserInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcesUserInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


