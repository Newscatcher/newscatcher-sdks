/*
 * NewsCatcher News API V2
 * NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: team@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.newscatcherapi.client.JSON;

/**
 * Search
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Search {
  public static final String SERIALIZED_NAME_Q = "q";
  @SerializedName(SERIALIZED_NAME_Q)
  private String q;

  /**
   * The language you want to search in.
   */
  @JsonAdapter(LangEnum.Adapter.class)
  public enum LangEnum {
    AF("af"),
    
    AR("ar"),
    
    BG("bg"),
    
    BN("bn"),
    
    CA("ca"),
    
    CN("cn"),
    
    CS("cs"),
    
    CY("cy"),
    
    DA("da"),
    
    DE("de"),
    
    EL("el"),
    
    EN("en"),
    
    ES("es"),
    
    ET("et"),
    
    FA("fa"),
    
    FI("fi"),
    
    FR("fr"),
    
    GU("gu"),
    
    HE("he"),
    
    HI("hi"),
    
    HR("hr"),
    
    HU("hu"),
    
    ID("id"),
    
    IT("it"),
    
    JA("ja"),
    
    KN("kn"),
    
    KO("ko"),
    
    LT("lt"),
    
    LV("lv"),
    
    MK("mk"),
    
    ML("ml"),
    
    MR("mr"),
    
    NE("ne"),
    
    NL("nl"),
    
    FALSE("false"),
    
    PA("pa"),
    
    PL("pl"),
    
    PT("pt"),
    
    RO("ro"),
    
    RU("ru"),
    
    SK("sk"),
    
    SL("sl"),
    
    SO("so"),
    
    SQ("sq"),
    
    SV("sv"),
    
    SW("sw"),
    
    TA("ta"),
    
    TE("te"),
    
    TH("th"),
    
    TL("tl"),
    
    TR("tr"),
    
    TW("tw"),
    
    UK("uk"),
    
    UR("ur"),
    
    VI("vi");

    private String value;

    LangEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LangEnum fromValue(String value) {
      for (LangEnum b : LangEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LangEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LangEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LangEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LangEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private LangEnum lang;

  /**
   * Inverse to the lang parameter.
   */
  @JsonAdapter(NotLangEnum.Adapter.class)
  public enum NotLangEnum {
    AF("af"),
    
    AR("ar"),
    
    BG("bg"),
    
    BN("bn"),
    
    CA("ca"),
    
    CN("cn"),
    
    CS("cs"),
    
    CY("cy"),
    
    DA("da"),
    
    DE("de"),
    
    EL("el"),
    
    EN("en"),
    
    ES("es"),
    
    ET("et"),
    
    FA("fa"),
    
    FI("fi"),
    
    FR("fr"),
    
    GU("gu"),
    
    HE("he"),
    
    HI("hi"),
    
    HR("hr"),
    
    HU("hu"),
    
    ID("id"),
    
    IT("it"),
    
    JA("ja"),
    
    KN("kn"),
    
    KO("ko"),
    
    LT("lt"),
    
    LV("lv"),
    
    MK("mk"),
    
    ML("ml"),
    
    MR("mr"),
    
    NE("ne"),
    
    NL("nl"),
    
    FALSE("false"),
    
    PA("pa"),
    
    PL("pl"),
    
    PT("pt"),
    
    RO("ro"),
    
    RU("ru"),
    
    SK("sk"),
    
    SL("sl"),
    
    SO("so"),
    
    SQ("sq"),
    
    SV("sv"),
    
    SW("sw"),
    
    TA("ta"),
    
    TE("te"),
    
    TH("th"),
    
    TL("tl"),
    
    TR("tr"),
    
    TW("tw"),
    
    UK("uk"),
    
    UR("ur"),
    
    VI("vi");

    private String value;

    NotLangEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotLangEnum fromValue(String value) {
      for (NotLangEnum b : NotLangEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotLangEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotLangEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotLangEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotLangEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NOT_LANG = "not_lang";
  @SerializedName(SERIALIZED_NAME_NOT_LANG)
  private NotLangEnum notLang;

  /**
   * Precision of the publication date.
   */
  @JsonAdapter(PublishedDatePrecisionEnum.Adapter.class)
  public enum PublishedDatePrecisionEnum {
    FULL("full"),
    
    TIMEZONE_UNKNOWN("timezone unknown"),
    
    DATE("date");

    private String value;

    PublishedDatePrecisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublishedDatePrecisionEnum fromValue(String value) {
      for (PublishedDatePrecisionEnum b : PublishedDatePrecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublishedDatePrecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublishedDatePrecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublishedDatePrecisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublishedDatePrecisionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PUBLISHED_DATE_PRECISION = "published_date_precision";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE_PRECISION)
  private PublishedDatePrecisionEnum publishedDatePrecision;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  /**
   * Gets or Sets searchIn
   */
  @JsonAdapter(SearchInEnum.Adapter.class)
  public enum SearchInEnum {
    TITLE("title"),
    
    SUMMARY("summary"),
    
    TITLE_SUMMARY("title_summary");

    private String value;

    SearchInEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchInEnum fromValue(String value) {
      for (SearchInEnum b : SearchInEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchInEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchInEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchInEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchInEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_IN = "search_in";
  @SerializedName(SERIALIZED_NAME_SEARCH_IN)
  private SearchInEnum searchIn;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private String countries;

  public static final String SERIALIZED_NAME_NOT_COUNTRIES = "not_countries";
  @SerializedName(SERIALIZED_NAME_NOT_COUNTRIES)
  private String notCountries;

  /**
   * Gets or Sets topic
   */
  @JsonAdapter(TopicEnum.Adapter.class)
  public enum TopicEnum {
    NEWS("news"),
    
    SPORT("sport"),
    
    TECH("tech"),
    
    WORLD("world"),
    
    FINANCE("finance"),
    
    POLITICS("politics"),
    
    BUSINESS("business"),
    
    ECONOMICS("economics"),
    
    ENTERTAINMENT("entertainment"),
    
    BEAUTY("beauty"),
    
    TRAVEL("travel"),
    
    MUSIC("music"),
    
    FOOD("food"),
    
    SCIENCE("science"),
    
    GAMING("gaming");

    private String value;

    TopicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TopicEnum fromValue(String value) {
      for (TopicEnum b : TopicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TopicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TopicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TopicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TopicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private TopicEnum topic;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private String sources;

  public static final String SERIALIZED_NAME_NOT_SOURCES = "not_sources";
  @SerializedName(SERIALIZED_NAME_NOT_SOURCES)
  private String notSources;

  public static final String SERIALIZED_NAME_RANKED_ONLY = "ranked_only";
  @SerializedName(SERIALIZED_NAME_RANKED_ONLY)
  private Boolean rankedOnly;

  public static final String SERIALIZED_NAME_FROM_RANK = "from_rank";
  @SerializedName(SERIALIZED_NAME_FROM_RANK)
  private Integer fromRank;

  public static final String SERIALIZED_NAME_TO_RANK = "to_rank";
  @SerializedName(SERIALIZED_NAME_TO_RANK)
  private Integer toRank;

  /**
   * Gets or Sets sortBy
   */
  @JsonAdapter(SortByEnum.Adapter.class)
  public enum SortByEnum {
    RELEVANCY("relevancy"),
    
    DATE("date"),
    
    RANK("rank");

    private String value;

    SortByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortByEnum fromValue(String value) {
      for (SortByEnum b : SortByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORT_BY = "sort_by";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private SortByEnum sortBy;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public Search() {
  }

  public Search q(String q) {
    
    this.q = q;
    return this;
  }

   /**
   * Keyword/keywords you&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section of the docs for more examples and explanations.
   * @return q
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "\"Elon Musk\"", value = "Keyword/keywords you're searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section of the docs for more examples and explanations.")

  public String getQ() {
    return q;
  }


  public void setQ(String q) {
    this.q = q;
  }


  public Search lang(LangEnum lang) {
    
    this.lang = lang;
    return this;
  }

   /**
   * The language you want to search in.
   * @return lang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "The language you want to search in.")

  public LangEnum getLang() {
    return lang;
  }


  public void setLang(LangEnum lang) {
    this.lang = lang;
  }


  public Search notLang(NotLangEnum notLang) {
    
    this.notLang = notLang;
    return this;
  }

   /**
   * Inverse to the lang parameter.
   * @return notLang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inverse to the lang parameter.")

  public NotLangEnum getNotLang() {
    return notLang;
  }


  public void setNotLang(NotLangEnum notLang) {
    this.notLang = notLang;
  }


  public Search publishedDatePrecision(PublishedDatePrecisionEnum publishedDatePrecision) {
    
    this.publishedDatePrecision = publishedDatePrecision;
    return this;
  }

   /**
   * Precision of the publication date.
   * @return publishedDatePrecision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "full", value = "Precision of the publication date.")

  public PublishedDatePrecisionEnum getPublishedDatePrecision() {
    return publishedDatePrecision;
  }


  public void setPublishedDatePrecision(PublishedDatePrecisionEnum publishedDatePrecision) {
    this.publishedDatePrecision = publishedDatePrecision;
  }


  public Search from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * YYYY/mm/dd From which point in time to start the search. The default timezone is UTC.  Defaults to the past week.
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021/05/06", value = "YYYY/mm/dd From which point in time to start the search. The default timezone is UTC.  Defaults to the past week.")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public Search to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * YYYY/mm/dd Until which point in time to search for. The default timezone is UTC.
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021/05/06", value = "YYYY/mm/dd Until which point in time to search for. The default timezone is UTC.")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public Search searchIn(SearchInEnum searchIn) {
    
    this.searchIn = searchIn;
    return this;
  }

   /**
   * Get searchIn
   * @return searchIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "title", value = "")

  public SearchInEnum getSearchIn() {
    return searchIn;
  }


  public void setSearchIn(SearchInEnum searchIn) {
    this.searchIn = searchIn;
  }


  public Search countries(String countries) {
    
    this.countries = countries;
    return this;
  }

   /**
   * Get countries
   * @return countries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US,CA", value = "")

  public String getCountries() {
    return countries;
  }


  public void setCountries(String countries) {
    this.countries = countries;
  }


  public Search notCountries(String notCountries) {
    
    this.notCountries = notCountries;
    return this;
  }

   /**
   * Get notCountries
   * @return notCountries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotCountries() {
    return notCountries;
  }


  public void setNotCountries(String notCountries) {
    this.notCountries = notCountries;
  }


  public Search topic(TopicEnum topic) {
    
    this.topic = topic;
    return this;
  }

   /**
   * Get topic
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "business", value = "")

  public TopicEnum getTopic() {
    return topic;
  }


  public void setTopic(TopicEnum topic) {
    this.topic = topic;
  }


  public Search sources(String sources) {
    
    this.sources = sources;
    return this;
  }

   /**
   * Get sources
   * @return sources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "nytimes.com,theguardian.com", value = "")

  public String getSources() {
    return sources;
  }


  public void setSources(String sources) {
    this.sources = sources;
  }


  public Search notSources(String notSources) {
    
    this.notSources = notSources;
    return this;
  }

   /**
   * Get notSources
   * @return notSources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotSources() {
    return notSources;
  }


  public void setNotSources(String notSources) {
    this.notSources = notSources;
  }


  public Search rankedOnly(Boolean rankedOnly) {
    
    this.rankedOnly = rankedOnly;
    return this;
  }

   /**
   * Get rankedOnly
   * @return rankedOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getRankedOnly() {
    return rankedOnly;
  }


  public void setRankedOnly(Boolean rankedOnly) {
    this.rankedOnly = rankedOnly;
  }


  public Search fromRank(Integer fromRank) {
    
    this.fromRank = fromRank;
    return this;
  }

   /**
   * &#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
   * minimum: 0
   * maximum: 999999
   * @return fromRank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "`[0:999999]` The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular ")

  public Integer getFromRank() {
    return fromRank;
  }


  public void setFromRank(Integer fromRank) {
    this.fromRank = fromRank;
  }


  public Search toRank(Integer toRank) {
    
    this.toRank = toRank;
    return this;
  }

   /**
   * &#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. 
   * minimum: 0
   * maximum: 999999
   * @return toRank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "`[0:999999]` The upper boundary of the rank of a news website to filter by. ")

  public Integer getToRank() {
    return toRank;
  }


  public void setToRank(Integer toRank) {
    this.toRank = toRank;
  }


  public Search sortBy(SortByEnum sortBy) {
    
    this.sortBy = sortBy;
    return this;
  }

   /**
   * Get sortBy
   * @return sortBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "rank", value = "")

  public SortByEnum getSortBy() {
    return sortBy;
  }


  public void setSortBy(SortByEnum sortBy) {
    this.sortBy = sortBy;
  }


  public Search pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * minimum: 1
   * maximum: 100
   * @return pageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "")

  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public Search page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * minimum: 1
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    this.page = page;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Search instance itself
   */
  public Search putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Search search = (Search) o;
    return Objects.equals(this.q, search.q) &&
        Objects.equals(this.lang, search.lang) &&
        Objects.equals(this.notLang, search.notLang) &&
        Objects.equals(this.publishedDatePrecision, search.publishedDatePrecision) &&
        Objects.equals(this.from, search.from) &&
        Objects.equals(this.to, search.to) &&
        Objects.equals(this.searchIn, search.searchIn) &&
        Objects.equals(this.countries, search.countries) &&
        Objects.equals(this.notCountries, search.notCountries) &&
        Objects.equals(this.topic, search.topic) &&
        Objects.equals(this.sources, search.sources) &&
        Objects.equals(this.notSources, search.notSources) &&
        Objects.equals(this.rankedOnly, search.rankedOnly) &&
        Objects.equals(this.fromRank, search.fromRank) &&
        Objects.equals(this.toRank, search.toRank) &&
        Objects.equals(this.sortBy, search.sortBy) &&
        Objects.equals(this.pageSize, search.pageSize) &&
        Objects.equals(this.page, search.page)&&
        Objects.equals(this.additionalProperties, search.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(q, lang, notLang, publishedDatePrecision, from, to, searchIn, countries, notCountries, topic, sources, notSources, rankedOnly, fromRank, toRank, sortBy, pageSize, page, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Search {\n");
    sb.append("    q: ").append(toIndentedString(q)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    notLang: ").append(toIndentedString(notLang)).append("\n");
    sb.append("    publishedDatePrecision: ").append(toIndentedString(publishedDatePrecision)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    searchIn: ").append(toIndentedString(searchIn)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    notCountries: ").append(toIndentedString(notCountries)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    notSources: ").append(toIndentedString(notSources)).append("\n");
    sb.append("    rankedOnly: ").append(toIndentedString(rankedOnly)).append("\n");
    sb.append("    fromRank: ").append(toIndentedString(fromRank)).append("\n");
    sb.append("    toRank: ").append(toIndentedString(toRank)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("q");
    openapiFields.add("lang");
    openapiFields.add("not_lang");
    openapiFields.add("published_date_precision");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("search_in");
    openapiFields.add("countries");
    openapiFields.add("not_countries");
    openapiFields.add("topic");
    openapiFields.add("sources");
    openapiFields.add("not_sources");
    openapiFields.add("ranked_only");
    openapiFields.add("from_rank");
    openapiFields.add("to_rank");
    openapiFields.add("sort_by");
    openapiFields.add("page_size");
    openapiFields.add("page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Search
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Search.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Search is not found in the empty JSON string", Search.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull()) && !jsonObj.get("q").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `q` to be a primitive type in the JSON string but got `%s`", jsonObj.get("q").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("not_lang") != null && !jsonObj.get("not_lang").isJsonNull()) && !jsonObj.get("not_lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `not_lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("not_lang").toString()));
      }
      if ((jsonObj.get("published_date_precision") != null && !jsonObj.get("published_date_precision").isJsonNull()) && !jsonObj.get("published_date_precision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date_precision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date_precision").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("search_in") != null && !jsonObj.get("search_in").isJsonNull()) && !jsonObj.get("search_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_in").toString()));
      }
      if ((jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) && !jsonObj.get("countries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      if ((jsonObj.get("not_countries") != null && !jsonObj.get("not_countries").isJsonNull()) && !jsonObj.get("not_countries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `not_countries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("not_countries").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) && !jsonObj.get("sources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      if ((jsonObj.get("not_sources") != null && !jsonObj.get("not_sources").isJsonNull()) && !jsonObj.get("not_sources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `not_sources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("not_sources").toString()));
      }
      if ((jsonObj.get("sort_by") != null && !jsonObj.get("sort_by").isJsonNull()) && !jsonObj.get("sort_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Search.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Search' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Search> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Search.class));

       return (TypeAdapter<T>) new TypeAdapter<Search>() {
           @Override
           public void write(JsonWriter out, Search value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Search read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Search instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Search given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Search
  * @throws IOException if the JSON string is invalid with respect to Search
  */
  public static Search fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Search.class);
  }

 /**
  * Convert an instance of Search to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

