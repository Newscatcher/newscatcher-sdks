/*
 * NewsCatcher News API V2
 *
 * NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: team@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Newscatcherapi.Net.Client.OpenAPIDateConverter;

namespace Newscatcherapi.Net.Model
{
    /// <summary>
    /// Search
    /// </summary>
    [DataContract(Name = "Search")]
    public partial class Search : IEquatable<Search>, IValidatableObject
    {
        /// <summary>
        /// The language you want to search in.
        /// </summary>
        /// <value>The language you want to search in.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LangEnum
        {
            /// <summary>
            /// Enum Af for value: af
            /// </summary>
            [EnumMember(Value = "af")]
            Af = 1,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar = 2,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg = 3,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            [EnumMember(Value = "bn")]
            Bn = 4,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 5,

            /// <summary>
            /// Enum Cn for value: cn
            /// </summary>
            [EnumMember(Value = "cn")]
            Cn = 6,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            [EnumMember(Value = "cs")]
            Cs = 7,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 8,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            [EnumMember(Value = "da")]
            Da = 9,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 10,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            [EnumMember(Value = "el")]
            El = 11,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 12,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 13,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 14,

            /// <summary>
            /// Enum Fa for value: fa
            /// </summary>
            [EnumMember(Value = "fa")]
            Fa = 15,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 16,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 17,

            /// <summary>
            /// Enum Gu for value: gu
            /// </summary>
            [EnumMember(Value = "gu")]
            Gu = 18,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            [EnumMember(Value = "he")]
            He = 19,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            [EnumMember(Value = "hi")]
            Hi = 20,

            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 21,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu = 22,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 23,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 24,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            [EnumMember(Value = "ja")]
            Ja = 25,

            /// <summary>
            /// Enum Kn for value: kn
            /// </summary>
            [EnumMember(Value = "kn")]
            Kn = 26,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            [EnumMember(Value = "ko")]
            Ko = 27,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 28,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv = 29,

            /// <summary>
            /// Enum Mk for value: mk
            /// </summary>
            [EnumMember(Value = "mk")]
            Mk = 30,

            /// <summary>
            /// Enum Ml for value: ml
            /// </summary>
            [EnumMember(Value = "ml")]
            Ml = 31,

            /// <summary>
            /// Enum Mr for value: mr
            /// </summary>
            [EnumMember(Value = "mr")]
            Mr = 32,

            /// <summary>
            /// Enum Ne for value: ne
            /// </summary>
            [EnumMember(Value = "ne")]
            Ne = 33,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl = 34,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 35,

            /// <summary>
            /// Enum Pa for value: pa
            /// </summary>
            [EnumMember(Value = "pa")]
            Pa = 36,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 37,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt = 38,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 39,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 40,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk = 41,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl = 42,

            /// <summary>
            /// Enum So for value: so
            /// </summary>
            [EnumMember(Value = "so")]
            So = 43,

            /// <summary>
            /// Enum Sq for value: sq
            /// </summary>
            [EnumMember(Value = "sq")]
            Sq = 44,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 45,

            /// <summary>
            /// Enum Sw for value: sw
            /// </summary>
            [EnumMember(Value = "sw")]
            Sw = 46,

            /// <summary>
            /// Enum Ta for value: ta
            /// </summary>
            [EnumMember(Value = "ta")]
            Ta = 47,

            /// <summary>
            /// Enum Te for value: te
            /// </summary>
            [EnumMember(Value = "te")]
            Te = 48,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            [EnumMember(Value = "th")]
            Th = 49,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            [EnumMember(Value = "tl")]
            Tl = 50,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr = 51,

            /// <summary>
            /// Enum Tw for value: tw
            /// </summary>
            [EnumMember(Value = "tw")]
            Tw = 52,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            [EnumMember(Value = "uk")]
            Uk = 53,

            /// <summary>
            /// Enum Ur for value: ur
            /// </summary>
            [EnumMember(Value = "ur")]
            Ur = 54,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 55

        }


        /// <summary>
        /// The language you want to search in.
        /// </summary>
        /// <value>The language you want to search in.</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public LangEnum? Lang { get; set; }
        /// <summary>
        /// Inverse to the lang parameter.
        /// </summary>
        /// <value>Inverse to the lang parameter.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NotLangEnum
        {
            /// <summary>
            /// Enum Af for value: af
            /// </summary>
            [EnumMember(Value = "af")]
            Af = 1,

            /// <summary>
            /// Enum Ar for value: ar
            /// </summary>
            [EnumMember(Value = "ar")]
            Ar = 2,

            /// <summary>
            /// Enum Bg for value: bg
            /// </summary>
            [EnumMember(Value = "bg")]
            Bg = 3,

            /// <summary>
            /// Enum Bn for value: bn
            /// </summary>
            [EnumMember(Value = "bn")]
            Bn = 4,

            /// <summary>
            /// Enum Ca for value: ca
            /// </summary>
            [EnumMember(Value = "ca")]
            Ca = 5,

            /// <summary>
            /// Enum Cn for value: cn
            /// </summary>
            [EnumMember(Value = "cn")]
            Cn = 6,

            /// <summary>
            /// Enum Cs for value: cs
            /// </summary>
            [EnumMember(Value = "cs")]
            Cs = 7,

            /// <summary>
            /// Enum Cy for value: cy
            /// </summary>
            [EnumMember(Value = "cy")]
            Cy = 8,

            /// <summary>
            /// Enum Da for value: da
            /// </summary>
            [EnumMember(Value = "da")]
            Da = 9,

            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 10,

            /// <summary>
            /// Enum El for value: el
            /// </summary>
            [EnumMember(Value = "el")]
            El = 11,

            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 12,

            /// <summary>
            /// Enum Es for value: es
            /// </summary>
            [EnumMember(Value = "es")]
            Es = 13,

            /// <summary>
            /// Enum Et for value: et
            /// </summary>
            [EnumMember(Value = "et")]
            Et = 14,

            /// <summary>
            /// Enum Fa for value: fa
            /// </summary>
            [EnumMember(Value = "fa")]
            Fa = 15,

            /// <summary>
            /// Enum Fi for value: fi
            /// </summary>
            [EnumMember(Value = "fi")]
            Fi = 16,

            /// <summary>
            /// Enum Fr for value: fr
            /// </summary>
            [EnumMember(Value = "fr")]
            Fr = 17,

            /// <summary>
            /// Enum Gu for value: gu
            /// </summary>
            [EnumMember(Value = "gu")]
            Gu = 18,

            /// <summary>
            /// Enum He for value: he
            /// </summary>
            [EnumMember(Value = "he")]
            He = 19,

            /// <summary>
            /// Enum Hi for value: hi
            /// </summary>
            [EnumMember(Value = "hi")]
            Hi = 20,

            /// <summary>
            /// Enum Hr for value: hr
            /// </summary>
            [EnumMember(Value = "hr")]
            Hr = 21,

            /// <summary>
            /// Enum Hu for value: hu
            /// </summary>
            [EnumMember(Value = "hu")]
            Hu = 22,

            /// <summary>
            /// Enum Id for value: id
            /// </summary>
            [EnumMember(Value = "id")]
            Id = 23,

            /// <summary>
            /// Enum It for value: it
            /// </summary>
            [EnumMember(Value = "it")]
            It = 24,

            /// <summary>
            /// Enum Ja for value: ja
            /// </summary>
            [EnumMember(Value = "ja")]
            Ja = 25,

            /// <summary>
            /// Enum Kn for value: kn
            /// </summary>
            [EnumMember(Value = "kn")]
            Kn = 26,

            /// <summary>
            /// Enum Ko for value: ko
            /// </summary>
            [EnumMember(Value = "ko")]
            Ko = 27,

            /// <summary>
            /// Enum Lt for value: lt
            /// </summary>
            [EnumMember(Value = "lt")]
            Lt = 28,

            /// <summary>
            /// Enum Lv for value: lv
            /// </summary>
            [EnumMember(Value = "lv")]
            Lv = 29,

            /// <summary>
            /// Enum Mk for value: mk
            /// </summary>
            [EnumMember(Value = "mk")]
            Mk = 30,

            /// <summary>
            /// Enum Ml for value: ml
            /// </summary>
            [EnumMember(Value = "ml")]
            Ml = 31,

            /// <summary>
            /// Enum Mr for value: mr
            /// </summary>
            [EnumMember(Value = "mr")]
            Mr = 32,

            /// <summary>
            /// Enum Ne for value: ne
            /// </summary>
            [EnumMember(Value = "ne")]
            Ne = 33,

            /// <summary>
            /// Enum Nl for value: nl
            /// </summary>
            [EnumMember(Value = "nl")]
            Nl = 34,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 35,

            /// <summary>
            /// Enum Pa for value: pa
            /// </summary>
            [EnumMember(Value = "pa")]
            Pa = 36,

            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 37,

            /// <summary>
            /// Enum Pt for value: pt
            /// </summary>
            [EnumMember(Value = "pt")]
            Pt = 38,

            /// <summary>
            /// Enum Ro for value: ro
            /// </summary>
            [EnumMember(Value = "ro")]
            Ro = 39,

            /// <summary>
            /// Enum Ru for value: ru
            /// </summary>
            [EnumMember(Value = "ru")]
            Ru = 40,

            /// <summary>
            /// Enum Sk for value: sk
            /// </summary>
            [EnumMember(Value = "sk")]
            Sk = 41,

            /// <summary>
            /// Enum Sl for value: sl
            /// </summary>
            [EnumMember(Value = "sl")]
            Sl = 42,

            /// <summary>
            /// Enum So for value: so
            /// </summary>
            [EnumMember(Value = "so")]
            So = 43,

            /// <summary>
            /// Enum Sq for value: sq
            /// </summary>
            [EnumMember(Value = "sq")]
            Sq = 44,

            /// <summary>
            /// Enum Sv for value: sv
            /// </summary>
            [EnumMember(Value = "sv")]
            Sv = 45,

            /// <summary>
            /// Enum Sw for value: sw
            /// </summary>
            [EnumMember(Value = "sw")]
            Sw = 46,

            /// <summary>
            /// Enum Ta for value: ta
            /// </summary>
            [EnumMember(Value = "ta")]
            Ta = 47,

            /// <summary>
            /// Enum Te for value: te
            /// </summary>
            [EnumMember(Value = "te")]
            Te = 48,

            /// <summary>
            /// Enum Th for value: th
            /// </summary>
            [EnumMember(Value = "th")]
            Th = 49,

            /// <summary>
            /// Enum Tl for value: tl
            /// </summary>
            [EnumMember(Value = "tl")]
            Tl = 50,

            /// <summary>
            /// Enum Tr for value: tr
            /// </summary>
            [EnumMember(Value = "tr")]
            Tr = 51,

            /// <summary>
            /// Enum Tw for value: tw
            /// </summary>
            [EnumMember(Value = "tw")]
            Tw = 52,

            /// <summary>
            /// Enum Uk for value: uk
            /// </summary>
            [EnumMember(Value = "uk")]
            Uk = 53,

            /// <summary>
            /// Enum Ur for value: ur
            /// </summary>
            [EnumMember(Value = "ur")]
            Ur = 54,

            /// <summary>
            /// Enum Vi for value: vi
            /// </summary>
            [EnumMember(Value = "vi")]
            Vi = 55

        }


        /// <summary>
        /// Inverse to the lang parameter.
        /// </summary>
        /// <value>Inverse to the lang parameter.</value>
        [DataMember(Name = "not_lang", EmitDefaultValue = false)]
        public NotLangEnum? NotLang { get; set; }
        /// <summary>
        /// Precision of the publication date.
        /// </summary>
        /// <value>Precision of the publication date.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PublishedDatePrecisionEnum
        {
            /// <summary>
            /// Enum Full for value: full
            /// </summary>
            [EnumMember(Value = "full")]
            Full = 1,

            /// <summary>
            /// Enum TimezoneUnknown for value: timezone unknown
            /// </summary>
            [EnumMember(Value = "timezone unknown")]
            TimezoneUnknown = 2,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 3

        }


        /// <summary>
        /// Precision of the publication date.
        /// </summary>
        /// <value>Precision of the publication date.</value>
        [DataMember(Name = "published_date_precision", EmitDefaultValue = false)]
        public PublishedDatePrecisionEnum? PublishedDatePrecision { get; set; }
        /// <summary>
        /// Defines SearchIn
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchInEnum
        {
            /// <summary>
            /// Enum Title for value: title
            /// </summary>
            [EnumMember(Value = "title")]
            Title = 1,

            /// <summary>
            /// Enum Summary for value: summary
            /// </summary>
            [EnumMember(Value = "summary")]
            Summary = 2,

            /// <summary>
            /// Enum TitleSummary for value: title_summary
            /// </summary>
            [EnumMember(Value = "title_summary")]
            TitleSummary = 3

        }


        /// <summary>
        /// Gets or Sets SearchIn
        /// </summary>
        [DataMember(Name = "search_in", EmitDefaultValue = false)]
        public SearchInEnum? SearchIn { get; set; }
        /// <summary>
        /// Defines Topic
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TopicEnum
        {
            /// <summary>
            /// Enum News for value: news
            /// </summary>
            [EnumMember(Value = "news")]
            News = 1,

            /// <summary>
            /// Enum Sport for value: sport
            /// </summary>
            [EnumMember(Value = "sport")]
            Sport = 2,

            /// <summary>
            /// Enum Tech for value: tech
            /// </summary>
            [EnumMember(Value = "tech")]
            Tech = 3,

            /// <summary>
            /// Enum World for value: world
            /// </summary>
            [EnumMember(Value = "world")]
            World = 4,

            /// <summary>
            /// Enum Finance for value: finance
            /// </summary>
            [EnumMember(Value = "finance")]
            Finance = 5,

            /// <summary>
            /// Enum Politics for value: politics
            /// </summary>
            [EnumMember(Value = "politics")]
            Politics = 6,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            [EnumMember(Value = "business")]
            Business = 7,

            /// <summary>
            /// Enum Economics for value: economics
            /// </summary>
            [EnumMember(Value = "economics")]
            Economics = 8,

            /// <summary>
            /// Enum Entertainment for value: entertainment
            /// </summary>
            [EnumMember(Value = "entertainment")]
            Entertainment = 9,

            /// <summary>
            /// Enum Beauty for value: beauty
            /// </summary>
            [EnumMember(Value = "beauty")]
            Beauty = 10,

            /// <summary>
            /// Enum Travel for value: travel
            /// </summary>
            [EnumMember(Value = "travel")]
            Travel = 11,

            /// <summary>
            /// Enum Music for value: music
            /// </summary>
            [EnumMember(Value = "music")]
            Music = 12,

            /// <summary>
            /// Enum Food for value: food
            /// </summary>
            [EnumMember(Value = "food")]
            Food = 13,

            /// <summary>
            /// Enum Science for value: science
            /// </summary>
            [EnumMember(Value = "science")]
            Science = 14,

            /// <summary>
            /// Enum Gaming for value: gaming
            /// </summary>
            [EnumMember(Value = "gaming")]
            Gaming = 15

        }


        /// <summary>
        /// Gets or Sets Topic
        /// </summary>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public TopicEnum? Topic { get; set; }
        /// <summary>
        /// Defines SortBy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortByEnum
        {
            /// <summary>
            /// Enum Relevancy for value: relevancy
            /// </summary>
            [EnumMember(Value = "relevancy")]
            Relevancy = 1,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 2,

            /// <summary>
            /// Enum Rank for value: rank
            /// </summary>
            [EnumMember(Value = "rank")]
            Rank = 3

        }


        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [DataMember(Name = "sort_by", EmitDefaultValue = false)]
        public SortByEnum? SortBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Search" /> class.
        /// </summary>
        /// <param name="q">Keyword/keywords you&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section of the docs for more examples and explanations..</param>
        /// <param name="lang">The language you want to search in..</param>
        /// <param name="notLang">Inverse to the lang parameter..</param>
        /// <param name="publishedDatePrecision">Precision of the publication date..</param>
        /// <param name="from">YYYY/mm/dd From which point in time to start the search. The default timezone is UTC.  Defaults to the past week..</param>
        /// <param name="to">YYYY/mm/dd Until which point in time to search for. The default timezone is UTC..</param>
        /// <param name="searchIn">searchIn.</param>
        /// <param name="countries">countries.</param>
        /// <param name="notCountries">notCountries.</param>
        /// <param name="topic">topic.</param>
        /// <param name="sources">sources.</param>
        /// <param name="notSources">notSources.</param>
        /// <param name="rankedOnly">rankedOnly.</param>
        /// <param name="fromRank">&#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular .</param>
        /// <param name="toRank">&#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. .</param>
        /// <param name="sortBy">sortBy.</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="page">page.</param>
        public Search(string q = default(string), LangEnum? lang = default(LangEnum?), NotLangEnum? notLang = default(NotLangEnum?), PublishedDatePrecisionEnum? publishedDatePrecision = default(PublishedDatePrecisionEnum?), string from = default(string), string to = default(string), SearchInEnum? searchIn = default(SearchInEnum?), string countries = default(string), string notCountries = default(string), TopicEnum? topic = default(TopicEnum?), string sources = default(string), string notSources = default(string), bool rankedOnly = default(bool), int fromRank = default(int), int toRank = default(int), SortByEnum? sortBy = default(SortByEnum?), int pageSize = default(int), int page = default(int))
        {
            this.Q = q;
            this.Lang = lang;
            this.NotLang = notLang;
            this.PublishedDatePrecision = publishedDatePrecision;
            this.From = from;
            this.To = to;
            this.SearchIn = searchIn;
            this.Countries = countries;
            this.NotCountries = notCountries;
            this.Topic = topic;
            this.Sources = sources;
            this.NotSources = notSources;
            this.RankedOnly = rankedOnly;
            this.FromRank = fromRank;
            this.ToRank = toRank;
            this.SortBy = sortBy;
            this.PageSize = pageSize;
            this.Page = page;
        }

        /// <summary>
        /// Keyword/keywords you&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section of the docs for more examples and explanations.
        /// </summary>
        /// <value>Keyword/keywords you&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section of the docs for more examples and explanations.</value>
        [DataMember(Name = "q", EmitDefaultValue = false)]
        public string Q { get; set; }

        /// <summary>
        /// YYYY/mm/dd From which point in time to start the search. The default timezone is UTC.  Defaults to the past week.
        /// </summary>
        /// <value>YYYY/mm/dd From which point in time to start the search. The default timezone is UTC.  Defaults to the past week.</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// YYYY/mm/dd Until which point in time to search for. The default timezone is UTC.
        /// </summary>
        /// <value>YYYY/mm/dd Until which point in time to search for. The default timezone is UTC.</value>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets Countries
        /// </summary>
        [DataMember(Name = "countries", EmitDefaultValue = false)]
        public string Countries { get; set; }

        /// <summary>
        /// Gets or Sets NotCountries
        /// </summary>
        [DataMember(Name = "not_countries", EmitDefaultValue = false)]
        public string NotCountries { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name = "sources", EmitDefaultValue = false)]
        public string Sources { get; set; }

        /// <summary>
        /// Gets or Sets NotSources
        /// </summary>
        [DataMember(Name = "not_sources", EmitDefaultValue = false)]
        public string NotSources { get; set; }

        /// <summary>
        /// Gets or Sets RankedOnly
        /// </summary>
        [DataMember(Name = "ranked_only", EmitDefaultValue = true)]
        public bool RankedOnly { get; set; }

        /// <summary>
        /// &#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
        /// </summary>
        /// <value>&#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular </value>
        [DataMember(Name = "from_rank", EmitDefaultValue = false)]
        public int FromRank { get; set; }

        /// <summary>
        /// &#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. 
        /// </summary>
        /// <value>&#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. </value>
        [DataMember(Name = "to_rank", EmitDefaultValue = false)]
        public int ToRank { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "page_size", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Search {\n");
            sb.Append("  Q: ").Append(Q).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  NotLang: ").Append(NotLang).Append("\n");
            sb.Append("  PublishedDatePrecision: ").Append(PublishedDatePrecision).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  SearchIn: ").Append(SearchIn).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  NotCountries: ").Append(NotCountries).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  NotSources: ").Append(NotSources).Append("\n");
            sb.Append("  RankedOnly: ").Append(RankedOnly).Append("\n");
            sb.Append("  FromRank: ").Append(FromRank).Append("\n");
            sb.Append("  ToRank: ").Append(ToRank).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Search);
        }

        /// <summary>
        /// Returns true if Search instances are equal
        /// </summary>
        /// <param name="input">Instance of Search to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Search input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Q == input.Q ||
                    (this.Q != null &&
                    this.Q.Equals(input.Q))
                ) && 
                (
                    this.Lang == input.Lang ||
                    this.Lang.Equals(input.Lang)
                ) && 
                (
                    this.NotLang == input.NotLang ||
                    this.NotLang.Equals(input.NotLang)
                ) && 
                (
                    this.PublishedDatePrecision == input.PublishedDatePrecision ||
                    this.PublishedDatePrecision.Equals(input.PublishedDatePrecision)
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.SearchIn == input.SearchIn ||
                    this.SearchIn.Equals(input.SearchIn)
                ) && 
                (
                    this.Countries == input.Countries ||
                    (this.Countries != null &&
                    this.Countries.Equals(input.Countries))
                ) && 
                (
                    this.NotCountries == input.NotCountries ||
                    (this.NotCountries != null &&
                    this.NotCountries.Equals(input.NotCountries))
                ) && 
                (
                    this.Topic == input.Topic ||
                    this.Topic.Equals(input.Topic)
                ) && 
                (
                    this.Sources == input.Sources ||
                    (this.Sources != null &&
                    this.Sources.Equals(input.Sources))
                ) && 
                (
                    this.NotSources == input.NotSources ||
                    (this.NotSources != null &&
                    this.NotSources.Equals(input.NotSources))
                ) && 
                (
                    this.RankedOnly == input.RankedOnly ||
                    this.RankedOnly.Equals(input.RankedOnly)
                ) && 
                (
                    this.FromRank == input.FromRank ||
                    this.FromRank.Equals(input.FromRank)
                ) && 
                (
                    this.ToRank == input.ToRank ||
                    this.ToRank.Equals(input.ToRank)
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    this.SortBy.Equals(input.SortBy)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    this.PageSize.Equals(input.PageSize)
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Q != null)
                {
                    hashCode = (hashCode * 59) + this.Q.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Lang.GetHashCode();
                hashCode = (hashCode * 59) + this.NotLang.GetHashCode();
                hashCode = (hashCode * 59) + this.PublishedDatePrecision.GetHashCode();
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SearchIn.GetHashCode();
                if (this.Countries != null)
                {
                    hashCode = (hashCode * 59) + this.Countries.GetHashCode();
                }
                if (this.NotCountries != null)
                {
                    hashCode = (hashCode * 59) + this.NotCountries.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Topic.GetHashCode();
                if (this.Sources != null)
                {
                    hashCode = (hashCode * 59) + this.Sources.GetHashCode();
                }
                if (this.NotSources != null)
                {
                    hashCode = (hashCode * 59) + this.NotSources.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RankedOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.FromRank.GetHashCode();
                hashCode = (hashCode * 59) + this.ToRank.GetHashCode();
                hashCode = (hashCode * 59) + this.SortBy.GetHashCode();
                hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                hashCode = (hashCode * 59) + this.Page.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FromRank (int) maximum
            if (this.FromRank > (int)999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromRank, must be a value less than or equal to 999999.", new [] { "FromRank" });
            }

            // FromRank (int) minimum
            if (this.FromRank < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromRank, must be a value greater than or equal to 0.", new [] { "FromRank" });
            }

            // ToRank (int) maximum
            if (this.ToRank > (int)999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToRank, must be a value less than or equal to 999999.", new [] { "ToRank" });
            }

            // ToRank (int) minimum
            if (this.ToRank < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToRank, must be a value greater than or equal to 0.", new [] { "ToRank" });
            }

            // PageSize (int) maximum
            if (this.PageSize > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageSize, must be a value less than or equal to 100.", new [] { "PageSize" });
            }

            // PageSize (int) minimum
            if (this.PageSize < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageSize, must be a value greater than or equal to 1.", new [] { "PageSize" });
            }

            // Page (int) minimum
            if (this.Page < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value greater than or equal to 1.", new [] { "Page" });
            }

            yield break;
        }
    }

}
