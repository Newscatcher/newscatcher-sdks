/*
 * NewsCatcher-V3 Production API
 *
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Newscatcherapi.Net.Client;
using Newscatcherapi.Net.Model;

namespace Newscatcherapi.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchDuplicatesByOriginalIdApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchduplicatesbyoriginalidGetResponse</returns>
        SearchduplicatesbyoriginalidGetResponse Get(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchduplicatesbyoriginalidGetResponse</returns>
        ApiResponse<SearchduplicatesbyoriginalidGetResponse> GetWithHttpInfo(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchduplicatesbyoriginalidPostResponse</returns>
        SearchduplicatesbyoriginalidPostResponse Post(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0);

        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchduplicatesbyoriginalidPostResponse</returns>
        ApiResponse<SearchduplicatesbyoriginalidPostResponse> PostWithHttpInfo(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchDuplicatesByOriginalIdApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchduplicatesbyoriginalidGetResponse</returns>
        System.Threading.Tasks.Task<SearchduplicatesbyoriginalidGetResponse> GetAsync(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchduplicatesbyoriginalidGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchduplicatesbyoriginalidGetResponse>> GetWithHttpInfoAsync(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchduplicatesbyoriginalidPostResponse</returns>
        System.Threading.Tasks.Task<SearchduplicatesbyoriginalidPostResponse> PostAsync(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to search for duplicate articles by original article id.
        /// </remarks>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchduplicatesbyoriginalidPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchduplicatesbyoriginalidPostResponse>> PostWithHttpInfoAsync(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchDuplicatesByOriginalIdApi : ISearchDuplicatesByOriginalIdApiSync, ISearchDuplicatesByOriginalIdApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchDuplicatesByOriginalIdApi : ISearchDuplicatesByOriginalIdApi
    {
        private Newscatcherapi.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchDuplicatesByOriginalIdApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchDuplicatesByOriginalIdApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchDuplicatesByOriginalIdApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchDuplicatesByOriginalIdApi(string basePath)
        {
            this.Configuration = Newscatcherapi.Net.Client.Configuration.MergeConfigurations(
                Newscatcherapi.Net.Client.GlobalConfiguration.Instance,
                new Newscatcherapi.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchDuplicatesByOriginalIdApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchDuplicatesByOriginalIdApi(Newscatcherapi.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Newscatcherapi.Net.Client.Configuration.MergeConfigurations(
                Newscatcherapi.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Newscatcherapi.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchDuplicatesByOriginalIdApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchDuplicatesByOriginalIdApi(Newscatcherapi.Net.Client.ISynchronousClient client, Newscatcherapi.Net.Client.IAsynchronousClient asyncClient, Newscatcherapi.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Newscatcherapi.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Newscatcherapi.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Newscatcherapi.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Newscatcherapi.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Newscatcherapi.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchduplicatesbyoriginalidGetResponse</returns>
        public SearchduplicatesbyoriginalidGetResponse Get(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidGetResponse> localVarResponse = GetWithHttpInfo(originalArticleId, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchduplicatesbyoriginalidGetResponse</returns>
        public Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidGetResponse> GetWithHttpInfo(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'originalArticleId' is set
            if (originalArticleId == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'originalArticleId' when calling SearchDuplicatesByOriginalIdApi->Get");
            }

            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "original_article_id", originalArticleId, ""));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize, ""));
            }

            localVarRequestOptions.Operation = "SearchDuplicatesByOriginalIdApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchduplicatesbyoriginalidGetResponse>("/api/search_duplicates_by_original_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchduplicatesbyoriginalidGetResponse</returns>
        public async System.Threading.Tasks.Task<SearchduplicatesbyoriginalidGetResponse> GetAsync(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidGetResponse> localVarResponse = await GetWithHttpInfoAsync(originalArticleId, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Get] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalArticleId"></param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="pageSize"> (optional, default to 100)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchduplicatesbyoriginalidGetResponse)</returns>
        public async System.Threading.Tasks.Task<Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidGetResponse>> GetWithHttpInfoAsync(string originalArticleId, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'originalArticleId' is set
            if (originalArticleId == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'originalArticleId' when calling SearchDuplicatesByOriginalIdApi->Get");
            }


            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "original_article_id", originalArticleId, ""));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page", page, ""));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Newscatcherapi.Net.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize, ""));
            }

            localVarRequestOptions.Operation = "SearchDuplicatesByOriginalIdApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchduplicatesbyoriginalidGetResponse>("/api/search_duplicates_by_original_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchduplicatesbyoriginalidPostResponse</returns>
        public SearchduplicatesbyoriginalidPostResponse Post(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0)
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidPostResponse> localVarResponse = PostWithHttpInfo(duplicatesByOriginalIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchduplicatesbyoriginalidPostResponse</returns>
        public Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidPostResponse> PostWithHttpInfo(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'duplicatesByOriginalIdRequest' is set
            if (duplicatesByOriginalIdRequest == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'duplicatesByOriginalIdRequest' when calling SearchDuplicatesByOriginalIdApi->Post");
            }

            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = duplicatesByOriginalIdRequest;

            localVarRequestOptions.Operation = "SearchDuplicatesByOriginalIdApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchduplicatesbyoriginalidPostResponse>("/api/search_duplicates_by_original_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchduplicatesbyoriginalidPostResponse</returns>
        public async System.Threading.Tasks.Task<SearchduplicatesbyoriginalidPostResponse> PostAsync(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidPostResponse> localVarResponse = await PostWithHttpInfoAsync(duplicatesByOriginalIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [Post] Search Duplicate Articles For Articles Request This endpoint allows you to search for duplicate articles by original article id.
        /// </summary>
        /// <exception cref="Newscatcherapi.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duplicatesByOriginalIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchduplicatesbyoriginalidPostResponse)</returns>
        public async System.Threading.Tasks.Task<Newscatcherapi.Net.Client.ApiResponse<SearchduplicatesbyoriginalidPostResponse>> PostWithHttpInfoAsync(DuplicatesByOriginalIdRequest duplicatesByOriginalIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'duplicatesByOriginalIdRequest' is set
            if (duplicatesByOriginalIdRequest == null)
            {
                throw new Newscatcherapi.Net.Client.ApiException(400, "Missing required parameter 'duplicatesByOriginalIdRequest' when calling SearchDuplicatesByOriginalIdApi->Post");
            }


            Newscatcherapi.Net.Client.RequestOptions localVarRequestOptions = new Newscatcherapi.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Newscatcherapi.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = duplicatesByOriginalIdRequest;

            localVarRequestOptions.Operation = "SearchDuplicatesByOriginalIdApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-token", this.Configuration.GetApiKeyWithPrefix("x-api-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchduplicatesbyoriginalidPostResponse>("/api/search_duplicates_by_original_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
