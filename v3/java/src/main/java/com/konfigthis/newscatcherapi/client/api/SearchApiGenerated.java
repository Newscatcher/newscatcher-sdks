/*
 * NewsCatcher-V3 Production API
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: Beta-3.0.0
 * Contact: maksym@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.api;

import com.konfigthis.newscatcherapi.client.ApiCallback;
import com.konfigthis.newscatcherapi.client.ApiClient;
import com.konfigthis.newscatcherapi.client.ApiException;
import com.konfigthis.newscatcherapi.client.ApiResponse;
import com.konfigthis.newscatcherapi.client.Configuration;
import com.konfigthis.newscatcherapi.client.Pair;
import com.konfigthis.newscatcherapi.client.ProgressRequestBody;
import com.konfigthis.newscatcherapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.newscatcherapi.client.model.SearchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SearchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"x-api-token\" is required but no API key was provided. Please set \"x-api-token\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(String q, String searchIn, String predefinedSources, String sources, String notSources, String lang, String notLang, String countries, String notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isPaidContent, String parentUrl, String allLinks, String allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean clusteringEnabled, Double clusteringThreshold, String clusteringVariable, Boolean includeNlpData, Boolean hasNlp, String theme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (searchIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_in", searchIn));
        }

        if (predefinedSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("predefined_sources", predefinedSources));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (notSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_sources", notSources));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (notLang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_lang", notLang));
        }

        if (countries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countries", countries));
        }

        if (notCountries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_countries", notCountries));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_", to));
        }

        if (publishedDatePrecision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published_date_precision", publishedDatePrecision));
        }

        if (byParseDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("by_parse_date", byParseDate));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (rankedOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ranked_only", rankedOnly));
        }

        if (fromRank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_rank", fromRank));
        }

        if (toRank != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_rank", toRank));
        }

        if (isHeadline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_headline", isHeadline));
        }

        if (isPaidContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_paid_content", isPaidContent));
        }

        if (parentUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_url", parentUrl));
        }

        if (allLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_links", allLinks));
        }

        if (allDomainLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_domain_links", allDomainLinks));
        }

        if (wordCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word_count_min", wordCountMin));
        }

        if (wordCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word_count_max", wordCountMax));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (clusteringEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clustering_enabled", clusteringEnabled));
        }

        if (clusteringThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clustering_threshold", clusteringThreshold));
        }

        if (clusteringVariable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clustering_variable", clusteringVariable));
        }

        if (includeNlpData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_nlp_data", includeNlpData));
        }

        if (hasNlp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_nlp", hasNlp));
        }

        if (theme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("theme", theme));
        }

        if (orGEntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ORG_entity_name", orGEntityName));
        }

        if (peREntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PER_entity_name", peREntityName));
        }

        if (loCEntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LOC_entity_name", loCEntityName));
        }

        if (miSCEntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MISC_entity_name", miSCEntityName));
        }

        if (titleSentimentMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_sentiment_min", titleSentimentMin));
        }

        if (titleSentimentMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_sentiment_max", titleSentimentMax));
        }

        if (contentSentimentMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_sentiment_min", contentSentimentMin));
        }

        if (contentSentimentMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_sentiment_max", contentSentimentMax));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String q, String searchIn, String predefinedSources, String sources, String notSources, String lang, String notLang, String countries, String notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isPaidContent, String parentUrl, String allLinks, String allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean clusteringEnabled, Double clusteringThreshold, String clusteringVariable, Boolean includeNlpData, Boolean hasNlp, String theme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling get(Async)");
        }

        return getCall(q, searchIn, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringEnabled, clusteringThreshold, clusteringVariable, includeNlpData, hasNlp, theme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, _callback);

    }


    private ApiResponse<Object> getWithHttpInfo(String q, String searchIn, String predefinedSources, String sources, String notSources, String lang, String notLang, String countries, String notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isPaidContent, String parentUrl, String allLinks, String allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean clusteringEnabled, Double clusteringThreshold, String clusteringVariable, Boolean includeNlpData, Boolean hasNlp, String theme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(q, searchIn, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringEnabled, clusteringThreshold, clusteringVariable, includeNlpData, hasNlp, theme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String q, String searchIn, String predefinedSources, String sources, String notSources, String lang, String notLang, String countries, String notCountries, String from, String to, String publishedDatePrecision, Boolean byParseDate, String sortBy, String rankedOnly, Integer fromRank, Integer toRank, Boolean isHeadline, Boolean isPaidContent, String parentUrl, String allLinks, String allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, Boolean clusteringEnabled, Double clusteringThreshold, String clusteringVariable, Boolean includeNlpData, Boolean hasNlp, String theme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(q, searchIn, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringEnabled, clusteringThreshold, clusteringVariable, includeNlpData, hasNlp, theme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String q;
        private String searchIn;
        private String predefinedSources;
        private String sources;
        private String notSources;
        private String lang;
        private String notLang;
        private String countries;
        private String notCountries;
        private String from;
        private String to;
        private String publishedDatePrecision;
        private Boolean byParseDate;
        private String sortBy;
        private String rankedOnly;
        private Integer fromRank;
        private Integer toRank;
        private Boolean isHeadline;
        private Boolean isPaidContent;
        private String parentUrl;
        private String allLinks;
        private String allDomainLinks;
        private Integer wordCountMin;
        private Integer wordCountMax;
        private Integer page;
        private Integer pageSize;
        private Boolean clusteringEnabled;
        private Double clusteringThreshold;
        private String clusteringVariable;
        private Boolean includeNlpData;
        private Boolean hasNlp;
        private String theme;
        private String orGEntityName;
        private String peREntityName;
        private String loCEntityName;
        private String miSCEntityName;
        private Double titleSentimentMin;
        private Double titleSentimentMax;
        private Double contentSentimentMin;
        private Double contentSentimentMax;

        private GetRequestBuilder(String q) {
            this.q = q;
        }

        /**
         * Set searchIn
         * @param searchIn  (optional, default to title_content)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder searchIn(String searchIn) {
            this.searchIn = searchIn;
            return this;
        }
        
        /**
         * Set predefinedSources
         * @param predefinedSources  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder predefinedSources(String predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder sources(String sources) {
            this.sources = sources;
            return this;
        }
        
        /**
         * Set notSources
         * @param notSources  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notSources(String notSources) {
            this.notSources = notSources;
            return this;
        }
        
        /**
         * Set lang
         * @param lang  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder lang(String lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Set notLang
         * @param notLang  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notLang(String notLang) {
            this.notLang = notLang;
            return this;
        }
        
        /**
         * Set countries
         * @param countries  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder countries(String countries) {
            this.countries = countries;
            return this;
        }
        
        /**
         * Set notCountries
         * @param notCountries  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notCountries(String notCountries) {
            this.notCountries = notCountries;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set publishedDatePrecision
         * @param publishedDatePrecision  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder publishedDatePrecision(String publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return this;
        }
        
        /**
         * Set byParseDate
         * @param byParseDate  (optional, default to false)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder byParseDate(Boolean byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional, default to relevancy)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set rankedOnly
         * @param rankedOnly  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder rankedOnly(String rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }
        
        /**
         * Set fromRank
         * @param fromRank  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder fromRank(Integer fromRank) {
            this.fromRank = fromRank;
            return this;
        }
        
        /**
         * Set toRank
         * @param toRank  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder toRank(Integer toRank) {
            this.toRank = toRank;
            return this;
        }
        
        /**
         * Set isHeadline
         * @param isHeadline  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isHeadline(Boolean isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }
        
        /**
         * Set isPaidContent
         * @param isPaidContent  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }
        
        /**
         * Set parentUrl
         * @param parentUrl  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder parentUrl(String parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }
        
        /**
         * Set allLinks
         * @param allLinks  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder allLinks(String allLinks) {
            this.allLinks = allLinks;
            return this;
        }
        
        /**
         * Set allDomainLinks
         * @param allDomainLinks  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder allDomainLinks(String allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }
        
        /**
         * Set wordCountMin
         * @param wordCountMin  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }
        
        /**
         * Set wordCountMax
         * @param wordCountMax  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 100)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set clusteringEnabled
         * @param clusteringEnabled  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder clusteringEnabled(Boolean clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }
        
        /**
         * Set clusteringThreshold
         * @param clusteringThreshold  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder clusteringThreshold(Double clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }
        
        /**
         * Set clusteringVariable
         * @param clusteringVariable  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder clusteringVariable(String clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }
        
        /**
         * Set includeNlpData
         * @param includeNlpData  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }
        
        /**
         * Set hasNlp
         * @param hasNlp  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder hasNlp(Boolean hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }
        
        /**
         * Set theme
         * @param theme  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Set orGEntityName
         * @param orGEntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder orGEntityName(String orGEntityName) {
            this.orGEntityName = orGEntityName;
            return this;
        }
        
        /**
         * Set peREntityName
         * @param peREntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder peREntityName(String peREntityName) {
            this.peREntityName = peREntityName;
            return this;
        }
        
        /**
         * Set loCEntityName
         * @param loCEntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder loCEntityName(String loCEntityName) {
            this.loCEntityName = loCEntityName;
            return this;
        }
        
        /**
         * Set miSCEntityName
         * @param miSCEntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder miSCEntityName(String miSCEntityName) {
            this.miSCEntityName = miSCEntityName;
            return this;
        }
        
        /**
         * Set titleSentimentMin
         * @param titleSentimentMin  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }
        
        /**
         * Set titleSentimentMax
         * @param titleSentimentMax  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }
        
        /**
         * Set contentSentimentMin
         * @param contentSentimentMin  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }
        
        /**
         * Set contentSentimentMax
         * @param contentSentimentMax  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }
        
        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(q, searchIn, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringEnabled, clusteringThreshold, clusteringVariable, includeNlpData, hasNlp, theme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, _callback);
        }


        /**
         * Execute get request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getWithHttpInfo(q, searchIn, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringEnabled, clusteringThreshold, clusteringVariable, includeNlpData, hasNlp, theme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(q, searchIn, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringEnabled, clusteringThreshold, clusteringVariable, includeNlpData, hasNlp, theme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAsync(q, searchIn, predefinedSources, sources, notSources, lang, notLang, countries, notCountries, from, to, publishedDatePrecision, byParseDate, sortBy, rankedOnly, fromRank, toRank, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringEnabled, clusteringThreshold, clusteringVariable, includeNlpData, hasNlp, theme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, _callback);
        }
    }

    /**
     * [Get] Search For Articles Request
     * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
     * @param q  (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get(String q) throws IllegalArgumentException {
        if (q == null) throw new IllegalArgumentException("\"q\" is required but got null");
            

        return new GetRequestBuilder(q);
    }
    private okhttp3.Call postCall(SearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchRequest;

        // create path and map variables
        String localVarPath = "/api/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postValidateBeforeCall(SearchRequest searchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchRequest' is set
        if (searchRequest == null) {
            throw new ApiException("Missing the required parameter 'searchRequest' when calling post(Async)");
        }

        return postCall(searchRequest, _callback);

    }


    private ApiResponse<Object> postWithHttpInfo(SearchRequest searchRequest) throws ApiException {
        okhttp3.Call localVarCall = postValidateBeforeCall(searchRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postAsync(SearchRequest searchRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postValidateBeforeCall(searchRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostRequestBuilder {
        private final String q;
        private String searchIn;
        private String predefinedSources;
        private String sources;
        private String notSources;
        private String lang;
        private String notLang;
        private String countries;
        private String notCountries;
        private String from;
        private String to;
        private String publishedDatePrecision;
        private Boolean byParseDate;
        private String sortBy;
        private String rankedOnly;
        private Integer fromRank;
        private Integer toRank;
        private Boolean isHeadline;
        private Boolean isPaidContent;
        private String parentUrl;
        private String allLinks;
        private String allDomainLinks;
        private Integer wordCountMin;
        private Integer wordCountMax;
        private Integer page;
        private Integer pageSize;
        private Boolean clusteringEnabled;
        private Double clusteringThreshold;
        private String clusteringVariable;
        private Boolean includeNlpData;
        private Boolean hasNlp;
        private String theme;
        private String orGEntityName;
        private String peREntityName;
        private String loCEntityName;
        private String miSCEntityName;
        private Double titleSentimentMin;
        private Double titleSentimentMax;
        private Double contentSentimentMin;
        private Double contentSentimentMax;

        private PostRequestBuilder(String q) {
            this.q = q;
        }

        /**
         * Set searchIn
         * @param searchIn  (optional, default to title_content)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder searchIn(String searchIn) {
            this.searchIn = searchIn;
            return this;
        }
        
        /**
         * Set predefinedSources
         * @param predefinedSources  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder predefinedSources(String predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder sources(String sources) {
            this.sources = sources;
            return this;
        }
        
        /**
         * Set notSources
         * @param notSources  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notSources(String notSources) {
            this.notSources = notSources;
            return this;
        }
        
        /**
         * Set lang
         * @param lang  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder lang(String lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Set notLang
         * @param notLang  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notLang(String notLang) {
            this.notLang = notLang;
            return this;
        }
        
        /**
         * Set countries
         * @param countries  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder countries(String countries) {
            this.countries = countries;
            return this;
        }
        
        /**
         * Set notCountries
         * @param notCountries  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notCountries(String notCountries) {
            this.notCountries = notCountries;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder to(String to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set publishedDatePrecision
         * @param publishedDatePrecision  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder publishedDatePrecision(String publishedDatePrecision) {
            this.publishedDatePrecision = publishedDatePrecision;
            return this;
        }
        
        /**
         * Set byParseDate
         * @param byParseDate  (optional, default to false)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder byParseDate(Boolean byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional, default to relevancy)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set rankedOnly
         * @param rankedOnly  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder rankedOnly(String rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }
        
        /**
         * Set fromRank
         * @param fromRank  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder fromRank(Integer fromRank) {
            this.fromRank = fromRank;
            return this;
        }
        
        /**
         * Set toRank
         * @param toRank  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder toRank(Integer toRank) {
            this.toRank = toRank;
            return this;
        }
        
        /**
         * Set isHeadline
         * @param isHeadline  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder isHeadline(Boolean isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }
        
        /**
         * Set isPaidContent
         * @param isPaidContent  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }
        
        /**
         * Set parentUrl
         * @param parentUrl  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder parentUrl(String parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }
        
        /**
         * Set allLinks
         * @param allLinks  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder allLinks(String allLinks) {
            this.allLinks = allLinks;
            return this;
        }
        
        /**
         * Set allDomainLinks
         * @param allDomainLinks  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder allDomainLinks(String allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }
        
        /**
         * Set wordCountMin
         * @param wordCountMin  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }
        
        /**
         * Set wordCountMax
         * @param wordCountMax  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 100)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set clusteringEnabled
         * @param clusteringEnabled  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder clusteringEnabled(Boolean clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }
        
        /**
         * Set clusteringThreshold
         * @param clusteringThreshold  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder clusteringThreshold(Double clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }
        
        /**
         * Set clusteringVariable
         * @param clusteringVariable  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder clusteringVariable(String clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }
        
        /**
         * Set includeNlpData
         * @param includeNlpData  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }
        
        /**
         * Set hasNlp
         * @param hasNlp  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder hasNlp(Boolean hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }
        
        /**
         * Set theme
         * @param theme  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Set orGEntityName
         * @param orGEntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder orGEntityName(String orGEntityName) {
            this.orGEntityName = orGEntityName;
            return this;
        }
        
        /**
         * Set peREntityName
         * @param peREntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder peREntityName(String peREntityName) {
            this.peREntityName = peREntityName;
            return this;
        }
        
        /**
         * Set loCEntityName
         * @param loCEntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder loCEntityName(String loCEntityName) {
            this.loCEntityName = loCEntityName;
            return this;
        }
        
        /**
         * Set miSCEntityName
         * @param miSCEntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder miSCEntityName(String miSCEntityName) {
            this.miSCEntityName = miSCEntityName;
            return this;
        }
        
        /**
         * Set titleSentimentMin
         * @param titleSentimentMin  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }
        
        /**
         * Set titleSentimentMax
         * @param titleSentimentMax  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }
        
        /**
         * Set contentSentimentMin
         * @param contentSentimentMin  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }
        
        /**
         * Set contentSentimentMax
         * @param contentSentimentMax  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }
        
        /**
         * Build call for post
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SearchRequest searchRequest = buildBodyParams();
            return postCall(searchRequest, _callback);
        }

        private SearchRequest buildBodyParams() {
            SearchRequest searchRequest = new SearchRequest();
            searchRequest.q(this.q);
            searchRequest.searchIn(this.searchIn);
            searchRequest.predefinedSources(this.predefinedSources);
            searchRequest.sources(this.sources);
            searchRequest.notSources(this.notSources);
            searchRequest.lang(this.lang);
            searchRequest.notLang(this.notLang);
            searchRequest.countries(this.countries);
            searchRequest.notCountries(this.notCountries);
            searchRequest.from(this.from);
            searchRequest.to(this.to);
            searchRequest.publishedDatePrecision(this.publishedDatePrecision);
            searchRequest.byParseDate(this.byParseDate);
            searchRequest.sortBy(this.sortBy);
            searchRequest.rankedOnly(this.rankedOnly);
            searchRequest.fromRank(this.fromRank);
            searchRequest.toRank(this.toRank);
            searchRequest.isHeadline(this.isHeadline);
            searchRequest.isPaidContent(this.isPaidContent);
            searchRequest.parentUrl(this.parentUrl);
            searchRequest.allLinks(this.allLinks);
            searchRequest.allDomainLinks(this.allDomainLinks);
            searchRequest.wordCountMin(this.wordCountMin);
            searchRequest.wordCountMax(this.wordCountMax);
            searchRequest.page(this.page);
            searchRequest.pageSize(this.pageSize);
            searchRequest.clusteringEnabled(this.clusteringEnabled);
            searchRequest.clusteringThreshold(this.clusteringThreshold);
            searchRequest.clusteringVariable(this.clusteringVariable);
            searchRequest.includeNlpData(this.includeNlpData);
            searchRequest.hasNlp(this.hasNlp);
            searchRequest.theme(this.theme);
            searchRequest.orGEntityName(this.orGEntityName);
            searchRequest.peREntityName(this.peREntityName);
            searchRequest.loCEntityName(this.loCEntityName);
            searchRequest.miSCEntityName(this.miSCEntityName);
            searchRequest.titleSentimentMin(this.titleSentimentMin);
            searchRequest.titleSentimentMax(this.titleSentimentMax);
            searchRequest.contentSentimentMin(this.contentSentimentMin);
            searchRequest.contentSentimentMax(this.contentSentimentMax);
            return searchRequest;
        }

        /**
         * Execute post request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SearchRequest searchRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = postWithHttpInfo(searchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute post request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SearchRequest searchRequest = buildBodyParams();
            return postWithHttpInfo(searchRequest);
        }

        /**
         * Execute post request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SearchRequest searchRequest = buildBodyParams();
            return postAsync(searchRequest, _callback);
        }
    }

    /**
     * [Post] Search For Articles Request
     * This endpoint allows you to search for articles. You can search for articles by keyword, language, country, source, and more.
     * @param searchRequest  (required)
     * @return PostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public PostRequestBuilder post(String q) throws IllegalArgumentException {
        if (q == null) throw new IllegalArgumentException("\"q\" is required but got null");
            

        return new PostRequestBuilder(q);
    }
}
