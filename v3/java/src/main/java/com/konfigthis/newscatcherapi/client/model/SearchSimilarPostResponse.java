/*
 * NewsCatcher-V3 Production API
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a> <br> <p style=\"color: red\"><b><em> This is a Testing Phase API. Please use it for testing purposes only. </em></b></p> <br>
 *
 * The version of the OpenAPI document: Beta-3.0.0
 * Contact: maksym@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.newscatcherapi.client.model.AllDomainLinksProperty;
import com.konfigthis.newscatcherapi.client.model.AllLinksProperty;
import com.konfigthis.newscatcherapi.client.model.AuthorsProperty;
import com.konfigthis.newscatcherapi.client.model.DtoResponsesMoreLikeThisResponseArticleResult;
import com.konfigthis.newscatcherapi.client.model.DtoResponsesMoreLikeThisResponseFailedSearchResponse;
import com.konfigthis.newscatcherapi.client.model.DtoResponsesMoreLikeThisResponseSearchResponse;
import com.konfigthis.newscatcherapi.client.model.JournalistsProperty;
import com.konfigthis.newscatcherapi.client.model.SimilarDocument;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import com.konfigthis.newscatcherapi.client.JSON;
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SearchSimilarPostResponse extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SearchSimilarPostResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SearchSimilarPostResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SearchSimilarPostResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DtoResponsesMoreLikeThisResponseFailedSearchResponse> adapterDtoResponsesMoreLikeThisResponseFailedSearchResponse = gson.getDelegateAdapter(this, TypeToken.get(DtoResponsesMoreLikeThisResponseFailedSearchResponse.class));
            final TypeAdapter<DtoResponsesMoreLikeThisResponseSearchResponse> adapterDtoResponsesMoreLikeThisResponseSearchResponse = gson.getDelegateAdapter(this, TypeToken.get(DtoResponsesMoreLikeThisResponseSearchResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<SearchSimilarPostResponse>() {
                @Override
                public void write(JsonWriter out, SearchSimilarPostResponse value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `DtoResponsesMoreLikeThisResponseFailedSearchResponse`
                    if (value.getActualInstance() instanceof DtoResponsesMoreLikeThisResponseFailedSearchResponse) {
                        JsonObject obj = adapterDtoResponsesMoreLikeThisResponseFailedSearchResponse.toJsonTree((DtoResponsesMoreLikeThisResponseFailedSearchResponse)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `DtoResponsesMoreLikeThisResponseSearchResponse`
                    if (value.getActualInstance() instanceof DtoResponsesMoreLikeThisResponseSearchResponse) {
                        JsonObject obj = adapterDtoResponsesMoreLikeThisResponseSearchResponse.toJsonTree((DtoResponsesMoreLikeThisResponseSearchResponse)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: DtoResponsesMoreLikeThisResponseFailedSearchResponse, DtoResponsesMoreLikeThisResponseSearchResponse");
                }

                @Override
                public SearchSimilarPostResponse read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize DtoResponsesMoreLikeThisResponseFailedSearchResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DtoResponsesMoreLikeThisResponseFailedSearchResponse.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'DtoResponsesMoreLikeThisResponseFailedSearchResponse'");
                        SearchSimilarPostResponse ret = new SearchSimilarPostResponse();
                        ret.setActualInstance(adapterDtoResponsesMoreLikeThisResponseFailedSearchResponse.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'DtoResponsesMoreLikeThisResponseFailedSearchResponse'", e);
                    }

                    // deserialize DtoResponsesMoreLikeThisResponseSearchResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DtoResponsesMoreLikeThisResponseSearchResponse.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'DtoResponsesMoreLikeThisResponseSearchResponse'");
                        SearchSimilarPostResponse ret = new SearchSimilarPostResponse();
                        ret.setActualInstance(adapterDtoResponsesMoreLikeThisResponseSearchResponse.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'DtoResponsesMoreLikeThisResponseSearchResponse'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for SearchSimilarPostResponse: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public SearchSimilarPostResponse() {
        super("anyOf", Boolean.FALSE);
    }

    public SearchSimilarPostResponse(DtoResponsesMoreLikeThisResponseFailedSearchResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public SearchSimilarPostResponse(DtoResponsesMoreLikeThisResponseSearchResponse o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("DtoResponsesMoreLikeThisResponseFailedSearchResponse", new GenericType<DtoResponsesMoreLikeThisResponseFailedSearchResponse>() {
        });
        schemas.put("DtoResponsesMoreLikeThisResponseSearchResponse", new GenericType<DtoResponsesMoreLikeThisResponseSearchResponse>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return SearchSimilarPostResponse.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * DtoResponsesMoreLikeThisResponseFailedSearchResponse, DtoResponsesMoreLikeThisResponseSearchResponse
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof DtoResponsesMoreLikeThisResponseFailedSearchResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DtoResponsesMoreLikeThisResponseSearchResponse) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be DtoResponsesMoreLikeThisResponseFailedSearchResponse, DtoResponsesMoreLikeThisResponseSearchResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * DtoResponsesMoreLikeThisResponseFailedSearchResponse, DtoResponsesMoreLikeThisResponseSearchResponse
     *
     * @return The actual instance (DtoResponsesMoreLikeThisResponseFailedSearchResponse, DtoResponsesMoreLikeThisResponseSearchResponse)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `DtoResponsesMoreLikeThisResponseFailedSearchResponse`. If the actual instance is not `DtoResponsesMoreLikeThisResponseFailedSearchResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DtoResponsesMoreLikeThisResponseFailedSearchResponse`
     * @throws ClassCastException if the instance is not `DtoResponsesMoreLikeThisResponseFailedSearchResponse`
     */
    public DtoResponsesMoreLikeThisResponseFailedSearchResponse getDtoResponsesMoreLikeThisResponseFailedSearchResponse() throws ClassCastException {
        return (DtoResponsesMoreLikeThisResponseFailedSearchResponse)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DtoResponsesMoreLikeThisResponseSearchResponse`. If the actual instance is not `DtoResponsesMoreLikeThisResponseSearchResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DtoResponsesMoreLikeThisResponseSearchResponse`
     * @throws ClassCastException if the instance is not `DtoResponsesMoreLikeThisResponseSearchResponse`
     */
    public DtoResponsesMoreLikeThisResponseSearchResponse getDtoResponsesMoreLikeThisResponseSearchResponse() throws ClassCastException {
        return (DtoResponsesMoreLikeThisResponseSearchResponse)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SearchSimilarPostResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with DtoResponsesMoreLikeThisResponseFailedSearchResponse
    try {
      DtoResponsesMoreLikeThisResponseFailedSearchResponse.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with DtoResponsesMoreLikeThisResponseSearchResponse
    try {
      DtoResponsesMoreLikeThisResponseSearchResponse.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for SearchSimilarPostResponse with anyOf schemas: DtoResponsesMoreLikeThisResponseFailedSearchResponse, DtoResponsesMoreLikeThisResponseSearchResponse. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of SearchSimilarPostResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchSimilarPostResponse
  * @throws IOException if the JSON string is invalid with respect to SearchSimilarPostResponse
  */
  public static SearchSimilarPostResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchSimilarPostResponse.class);
  }

 /**
  * Convert an instance of SearchSimilarPostResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

