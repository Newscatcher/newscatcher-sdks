/*
 * NewsCatcher-V3 Production API
 * <img src='https://uploads-ssl.webflow.com/6429857b17973b636c2195c5/646c6f1eb774ff2f2997bec5_newscatcher_.svg' width='286' height='35' /> <br>  <br>Visit our website  <a href='https://newscatcherapi.com'>https://newscatcherapi.com</a>
 *
 * The version of the OpenAPI document: 3.2.16
 * Contact: maksym@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.api;

import com.konfigthis.newscatcherapi.client.ApiCallback;
import com.konfigthis.newscatcherapi.client.ApiClient;
import com.konfigthis.newscatcherapi.client.ApiException;
import com.konfigthis.newscatcherapi.client.ApiResponse;
import com.konfigthis.newscatcherapi.client.Configuration;
import com.konfigthis.newscatcherapi.client.Pair;
import com.konfigthis.newscatcherapi.client.ProgressRequestBody;
import com.konfigthis.newscatcherapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.newscatcherapi.client.model.CSLHResponse;
import com.konfigthis.newscatcherapi.client.model.CSLHResponse1;
import com.konfigthis.newscatcherapi.client.model.LatestHeadlinesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LatestHeadlinesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LatestHeadlinesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LatestHeadlinesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"x-api-token\" is required but no API key was provided. Please set \"x-api-token\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(String when, Boolean byParseDate, Object lang, Object notLang, Object countries, Object notCountries, Object sources, Object predefinedSources, Object notSources, Object notAuthorName, String rankedOnly, Boolean isHeadline, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, String clusteringVariable, Boolean clusteringEnabled, Double clusteringThreshold, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/latest_headlines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (when != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("when", when));
        }

        if (byParseDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("by_parse_date", byParseDate));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (notLang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_lang", notLang));
        }

        if (countries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countries", countries));
        }

        if (notCountries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_countries", notCountries));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (predefinedSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("predefined_sources", predefinedSources));
        }

        if (notSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_sources", notSources));
        }

        if (notAuthorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_author_name", notAuthorName));
        }

        if (rankedOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ranked_only", rankedOnly));
        }

        if (isHeadline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_headline", isHeadline));
        }

        if (isPaidContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_paid_content", isPaidContent));
        }

        if (parentUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_url", parentUrl));
        }

        if (allLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_links", allLinks));
        }

        if (allDomainLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_domain_links", allDomainLinks));
        }

        if (wordCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word_count_min", wordCountMin));
        }

        if (wordCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word_count_max", wordCountMax));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (clusteringVariable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clustering_variable", clusteringVariable));
        }

        if (clusteringEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clustering_enabled", clusteringEnabled));
        }

        if (clusteringThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clustering_threshold", clusteringThreshold));
        }

        if (includeNlpData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_nlp_data", includeNlpData));
        }

        if (hasNlp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_nlp", hasNlp));
        }

        if (theme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("theme", theme));
        }

        if (notTheme != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_theme", notTheme));
        }

        if (orGEntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ORG_entity_name", orGEntityName));
        }

        if (peREntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PER_entity_name", peREntityName));
        }

        if (loCEntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LOC_entity_name", loCEntityName));
        }

        if (miSCEntityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MISC_entity_name", miSCEntityName));
        }

        if (titleSentimentMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_sentiment_min", titleSentimentMin));
        }

        if (titleSentimentMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title_sentiment_max", titleSentimentMax));
        }

        if (contentSentimentMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_sentiment_min", contentSentimentMin));
        }

        if (contentSentimentMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_sentiment_max", contentSentimentMax));
        }

        if (iptcTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iptc_tags", iptcTags));
        }

        if (notIptcTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_iptc_tags", notIptcTags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String when, Boolean byParseDate, Object lang, Object notLang, Object countries, Object notCountries, Object sources, Object predefinedSources, Object notSources, Object notAuthorName, String rankedOnly, Boolean isHeadline, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, String clusteringVariable, Boolean clusteringEnabled, Double clusteringThreshold, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags, final ApiCallback _callback) throws ApiException {
        return getCall(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, _callback);

    }


    private ApiResponse<CSLHResponse> getWithHttpInfo(String when, Boolean byParseDate, Object lang, Object notLang, Object countries, Object notCountries, Object sources, Object predefinedSources, Object notSources, Object notAuthorName, String rankedOnly, Boolean isHeadline, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, String clusteringVariable, Boolean clusteringEnabled, Double clusteringThreshold, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, null);
        Type localVarReturnType = new TypeToken<CSLHResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String when, Boolean byParseDate, Object lang, Object notLang, Object countries, Object notCountries, Object sources, Object predefinedSources, Object notSources, Object notAuthorName, String rankedOnly, Boolean isHeadline, Boolean isPaidContent, Object parentUrl, Object allLinks, Object allDomainLinks, Integer wordCountMin, Integer wordCountMax, Integer page, Integer pageSize, String clusteringVariable, Boolean clusteringEnabled, Double clusteringThreshold, Boolean includeNlpData, Boolean hasNlp, String theme, String notTheme, String orGEntityName, String peREntityName, String loCEntityName, String miSCEntityName, Double titleSentimentMin, Double titleSentimentMax, Double contentSentimentMin, Double contentSentimentMax, Object iptcTags, Object notIptcTags, final ApiCallback<CSLHResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, _callback);
        Type localVarReturnType = new TypeToken<CSLHResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private String when;
        private Boolean byParseDate;
        private Object lang;
        private Object notLang;
        private Object countries;
        private Object notCountries;
        private Object sources;
        private Object predefinedSources;
        private Object notSources;
        private Object notAuthorName;
        private String rankedOnly;
        private Boolean isHeadline;
        private Boolean isPaidContent;
        private Object parentUrl;
        private Object allLinks;
        private Object allDomainLinks;
        private Integer wordCountMin;
        private Integer wordCountMax;
        private Integer page;
        private Integer pageSize;
        private String clusteringVariable;
        private Boolean clusteringEnabled;
        private Double clusteringThreshold;
        private Boolean includeNlpData;
        private Boolean hasNlp;
        private String theme;
        private String notTheme;
        private String orGEntityName;
        private String peREntityName;
        private String loCEntityName;
        private String miSCEntityName;
        private Double titleSentimentMin;
        private Double titleSentimentMax;
        private Double contentSentimentMin;
        private Double contentSentimentMax;
        private Object iptcTags;
        private Object notIptcTags;

        private GetRequestBuilder() {
        }

        /**
         * Set when
         * @param when  (optional, default to 7d)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder when(String when) {
            this.when = when;
            return this;
        }
        
        /**
         * Set byParseDate
         * @param byParseDate  (optional, default to false)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder byParseDate(Boolean byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }
        
        /**
         * Set lang
         * @param lang  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder lang(Object lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Set notLang
         * @param notLang  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notLang(Object notLang) {
            this.notLang = notLang;
            return this;
        }
        
        /**
         * Set countries
         * @param countries  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder countries(Object countries) {
            this.countries = countries;
            return this;
        }
        
        /**
         * Set notCountries
         * @param notCountries  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notCountries(Object notCountries) {
            this.notCountries = notCountries;
            return this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder sources(Object sources) {
            this.sources = sources;
            return this;
        }
        
        /**
         * Set predefinedSources
         * @param predefinedSources  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder predefinedSources(Object predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }
        
        /**
         * Set notSources
         * @param notSources  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notSources(Object notSources) {
            this.notSources = notSources;
            return this;
        }
        
        /**
         * Set notAuthorName
         * @param notAuthorName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notAuthorName(Object notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }
        
        /**
         * Set rankedOnly
         * @param rankedOnly  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder rankedOnly(String rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }
        
        /**
         * Set isHeadline
         * @param isHeadline  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isHeadline(Boolean isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }
        
        /**
         * Set isPaidContent
         * @param isPaidContent  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }
        
        /**
         * Set parentUrl
         * @param parentUrl  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder parentUrl(Object parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }
        
        /**
         * Set allLinks
         * @param allLinks  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder allLinks(Object allLinks) {
            this.allLinks = allLinks;
            return this;
        }
        
        /**
         * Set allDomainLinks
         * @param allDomainLinks  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder allDomainLinks(Object allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }
        
        /**
         * Set wordCountMin
         * @param wordCountMin  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }
        
        /**
         * Set wordCountMax
         * @param wordCountMax  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 100)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set clusteringVariable
         * @param clusteringVariable  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder clusteringVariable(String clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }
        
        /**
         * Set clusteringEnabled
         * @param clusteringEnabled  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder clusteringEnabled(Boolean clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }
        
        /**
         * Set clusteringThreshold
         * @param clusteringThreshold  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder clusteringThreshold(Double clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }
        
        /**
         * Set includeNlpData
         * @param includeNlpData  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }
        
        /**
         * Set hasNlp
         * @param hasNlp  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder hasNlp(Boolean hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }
        
        /**
         * Set theme
         * @param theme  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Set notTheme
         * @param notTheme  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notTheme(String notTheme) {
            this.notTheme = notTheme;
            return this;
        }
        
        /**
         * Set orGEntityName
         * @param orGEntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder orGEntityName(String orGEntityName) {
            this.orGEntityName = orGEntityName;
            return this;
        }
        
        /**
         * Set peREntityName
         * @param peREntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder peREntityName(String peREntityName) {
            this.peREntityName = peREntityName;
            return this;
        }
        
        /**
         * Set loCEntityName
         * @param loCEntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder loCEntityName(String loCEntityName) {
            this.loCEntityName = loCEntityName;
            return this;
        }
        
        /**
         * Set miSCEntityName
         * @param miSCEntityName  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder miSCEntityName(String miSCEntityName) {
            this.miSCEntityName = miSCEntityName;
            return this;
        }
        
        /**
         * Set titleSentimentMin
         * @param titleSentimentMin  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }
        
        /**
         * Set titleSentimentMax
         * @param titleSentimentMax  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }
        
        /**
         * Set contentSentimentMin
         * @param contentSentimentMin  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }
        
        /**
         * Set contentSentimentMax
         * @param contentSentimentMax  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }
        
        /**
         * Set iptcTags
         * @param iptcTags  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder iptcTags(Object iptcTags) {
            this.iptcTags = iptcTags;
            return this;
        }
        
        /**
         * Set notIptcTags
         * @param notIptcTags  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder notIptcTags(Object notIptcTags) {
            this.notIptcTags = notIptcTags;
            return this;
        }
        
        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, _callback);
        }


        /**
         * Execute get request
         * @return CSLHResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public CSLHResponse execute() throws ApiException {
            ApiResponse<CSLHResponse> localVarResp = getWithHttpInfo(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;CSLHResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CSLHResponse> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CSLHResponse> _callback) throws ApiException {
            return getAsync(when, byParseDate, lang, notLang, countries, notCountries, sources, predefinedSources, notSources, notAuthorName, rankedOnly, isHeadline, isPaidContent, parentUrl, allLinks, allDomainLinks, wordCountMin, wordCountMax, page, pageSize, clusteringVariable, clusteringEnabled, clusteringThreshold, includeNlpData, hasNlp, theme, notTheme, orGEntityName, peREntityName, loCEntityName, miSCEntityName, titleSentimentMin, titleSentimentMax, contentSentimentMin, contentSentimentMax, iptcTags, notIptcTags, _callback);
        }
    }

    /**
     * [Get] Search For Latest Headlines Request
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get() throws IllegalArgumentException {
        return new GetRequestBuilder();
    }
    private okhttp3.Call postCall(LatestHeadlinesRequest latestHeadlinesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = latestHeadlinesRequest;

        // create path and map variables
        String localVarPath = "/api/latest_headlines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postValidateBeforeCall(LatestHeadlinesRequest latestHeadlinesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latestHeadlinesRequest' is set
        if (latestHeadlinesRequest == null) {
            throw new ApiException("Missing the required parameter 'latestHeadlinesRequest' when calling post(Async)");
        }

        return postCall(latestHeadlinesRequest, _callback);

    }


    private ApiResponse<CSLHResponse1> postWithHttpInfo(LatestHeadlinesRequest latestHeadlinesRequest) throws ApiException {
        okhttp3.Call localVarCall = postValidateBeforeCall(latestHeadlinesRequest, null);
        Type localVarReturnType = new TypeToken<CSLHResponse1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postAsync(LatestHeadlinesRequest latestHeadlinesRequest, final ApiCallback<CSLHResponse1> _callback) throws ApiException {

        okhttp3.Call localVarCall = postValidateBeforeCall(latestHeadlinesRequest, _callback);
        Type localVarReturnType = new TypeToken<CSLHResponse1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostRequestBuilder {
        private String when;
        private Boolean byParseDate;
        private Object lang;
        private Object notLang;
        private Object countries;
        private Object notCountries;
        private Object sources;
        private Object predefinedSources;
        private Object notSources;
        private Object notAuthorName;
        private String rankedOnly;
        private Boolean isHeadline;
        private Boolean isPaidContent;
        private Object parentUrl;
        private Object allLinks;
        private Object allDomainLinks;
        private Integer wordCountMin;
        private Integer wordCountMax;
        private Integer page;
        private Integer pageSize;
        private String clusteringVariable;
        private Boolean clusteringEnabled;
        private Double clusteringThreshold;
        private Boolean includeNlpData;
        private Boolean hasNlp;
        private String theme;
        private String notTheme;
        private String orGEntityName;
        private String peREntityName;
        private String loCEntityName;
        private String miSCEntityName;
        private Double titleSentimentMin;
        private Double titleSentimentMax;
        private Double contentSentimentMin;
        private Double contentSentimentMax;
        private Object iptcTags;
        private Object notIptcTags;

        private PostRequestBuilder() {
        }

        /**
         * Set when
         * @param when  (optional, default to 7d)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder when(String when) {
            this.when = when;
            return this;
        }
        
        /**
         * Set byParseDate
         * @param byParseDate  (optional, default to false)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder byParseDate(Boolean byParseDate) {
            this.byParseDate = byParseDate;
            return this;
        }
        
        /**
         * Set lang
         * @param lang  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder lang(Object lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Set notLang
         * @param notLang  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notLang(Object notLang) {
            this.notLang = notLang;
            return this;
        }
        
        /**
         * Set countries
         * @param countries  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder countries(Object countries) {
            this.countries = countries;
            return this;
        }
        
        /**
         * Set notCountries
         * @param notCountries  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notCountries(Object notCountries) {
            this.notCountries = notCountries;
            return this;
        }
        
        /**
         * Set sources
         * @param sources  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder sources(Object sources) {
            this.sources = sources;
            return this;
        }
        
        /**
         * Set predefinedSources
         * @param predefinedSources  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder predefinedSources(Object predefinedSources) {
            this.predefinedSources = predefinedSources;
            return this;
        }
        
        /**
         * Set notSources
         * @param notSources  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notSources(Object notSources) {
            this.notSources = notSources;
            return this;
        }
        
        /**
         * Set notAuthorName
         * @param notAuthorName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notAuthorName(Object notAuthorName) {
            this.notAuthorName = notAuthorName;
            return this;
        }
        
        /**
         * Set rankedOnly
         * @param rankedOnly  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder rankedOnly(String rankedOnly) {
            this.rankedOnly = rankedOnly;
            return this;
        }
        
        /**
         * Set isHeadline
         * @param isHeadline  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder isHeadline(Boolean isHeadline) {
            this.isHeadline = isHeadline;
            return this;
        }
        
        /**
         * Set isPaidContent
         * @param isPaidContent  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder isPaidContent(Boolean isPaidContent) {
            this.isPaidContent = isPaidContent;
            return this;
        }
        
        /**
         * Set parentUrl
         * @param parentUrl  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder parentUrl(Object parentUrl) {
            this.parentUrl = parentUrl;
            return this;
        }
        
        /**
         * Set allLinks
         * @param allLinks  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder allLinks(Object allLinks) {
            this.allLinks = allLinks;
            return this;
        }
        
        /**
         * Set allDomainLinks
         * @param allDomainLinks  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder allDomainLinks(Object allDomainLinks) {
            this.allDomainLinks = allDomainLinks;
            return this;
        }
        
        /**
         * Set wordCountMin
         * @param wordCountMin  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder wordCountMin(Integer wordCountMin) {
            this.wordCountMin = wordCountMin;
            return this;
        }
        
        /**
         * Set wordCountMax
         * @param wordCountMax  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder wordCountMax(Integer wordCountMax) {
            this.wordCountMax = wordCountMax;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional, default to 1)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize  (optional, default to 100)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set clusteringVariable
         * @param clusteringVariable  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder clusteringVariable(String clusteringVariable) {
            this.clusteringVariable = clusteringVariable;
            return this;
        }
        
        /**
         * Set clusteringEnabled
         * @param clusteringEnabled  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder clusteringEnabled(Boolean clusteringEnabled) {
            this.clusteringEnabled = clusteringEnabled;
            return this;
        }
        
        /**
         * Set clusteringThreshold
         * @param clusteringThreshold  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder clusteringThreshold(Double clusteringThreshold) {
            this.clusteringThreshold = clusteringThreshold;
            return this;
        }
        
        /**
         * Set includeNlpData
         * @param includeNlpData  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder includeNlpData(Boolean includeNlpData) {
            this.includeNlpData = includeNlpData;
            return this;
        }
        
        /**
         * Set hasNlp
         * @param hasNlp  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder hasNlp(Boolean hasNlp) {
            this.hasNlp = hasNlp;
            return this;
        }
        
        /**
         * Set theme
         * @param theme  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder theme(String theme) {
            this.theme = theme;
            return this;
        }
        
        /**
         * Set notTheme
         * @param notTheme  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notTheme(String notTheme) {
            this.notTheme = notTheme;
            return this;
        }
        
        /**
         * Set orGEntityName
         * @param orGEntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder orGEntityName(String orGEntityName) {
            this.orGEntityName = orGEntityName;
            return this;
        }
        
        /**
         * Set peREntityName
         * @param peREntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder peREntityName(String peREntityName) {
            this.peREntityName = peREntityName;
            return this;
        }
        
        /**
         * Set loCEntityName
         * @param loCEntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder loCEntityName(String loCEntityName) {
            this.loCEntityName = loCEntityName;
            return this;
        }
        
        /**
         * Set miSCEntityName
         * @param miSCEntityName  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder miSCEntityName(String miSCEntityName) {
            this.miSCEntityName = miSCEntityName;
            return this;
        }
        
        /**
         * Set titleSentimentMin
         * @param titleSentimentMin  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder titleSentimentMin(Double titleSentimentMin) {
            this.titleSentimentMin = titleSentimentMin;
            return this;
        }
        
        /**
         * Set titleSentimentMax
         * @param titleSentimentMax  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder titleSentimentMax(Double titleSentimentMax) {
            this.titleSentimentMax = titleSentimentMax;
            return this;
        }
        
        /**
         * Set contentSentimentMin
         * @param contentSentimentMin  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder contentSentimentMin(Double contentSentimentMin) {
            this.contentSentimentMin = contentSentimentMin;
            return this;
        }
        
        /**
         * Set contentSentimentMax
         * @param contentSentimentMax  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder contentSentimentMax(Double contentSentimentMax) {
            this.contentSentimentMax = contentSentimentMax;
            return this;
        }
        
        /**
         * Set iptcTags
         * @param iptcTags  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder iptcTags(Object iptcTags) {
            this.iptcTags = iptcTags;
            return this;
        }
        
        /**
         * Set notIptcTags
         * @param notIptcTags  (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder notIptcTags(Object notIptcTags) {
            this.notIptcTags = notIptcTags;
            return this;
        }
        
        /**
         * Build call for post
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LatestHeadlinesRequest latestHeadlinesRequest = buildBodyParams();
            return postCall(latestHeadlinesRequest, _callback);
        }

        private LatestHeadlinesRequest buildBodyParams() {
            LatestHeadlinesRequest latestHeadlinesRequest = new LatestHeadlinesRequest();
            latestHeadlinesRequest.when(this.when);
            latestHeadlinesRequest.byParseDate(this.byParseDate);
            latestHeadlinesRequest.lang(this.lang);
            latestHeadlinesRequest.notLang(this.notLang);
            latestHeadlinesRequest.countries(this.countries);
            latestHeadlinesRequest.notCountries(this.notCountries);
            latestHeadlinesRequest.sources(this.sources);
            latestHeadlinesRequest.predefinedSources(this.predefinedSources);
            latestHeadlinesRequest.notSources(this.notSources);
            latestHeadlinesRequest.notAuthorName(this.notAuthorName);
            latestHeadlinesRequest.rankedOnly(this.rankedOnly);
            latestHeadlinesRequest.isHeadline(this.isHeadline);
            latestHeadlinesRequest.isPaidContent(this.isPaidContent);
            latestHeadlinesRequest.parentUrl(this.parentUrl);
            latestHeadlinesRequest.allLinks(this.allLinks);
            latestHeadlinesRequest.allDomainLinks(this.allDomainLinks);
            latestHeadlinesRequest.wordCountMin(this.wordCountMin);
            latestHeadlinesRequest.wordCountMax(this.wordCountMax);
            latestHeadlinesRequest.page(this.page);
            latestHeadlinesRequest.pageSize(this.pageSize);
            latestHeadlinesRequest.clusteringVariable(this.clusteringVariable);
            latestHeadlinesRequest.clusteringEnabled(this.clusteringEnabled);
            latestHeadlinesRequest.clusteringThreshold(this.clusteringThreshold);
            latestHeadlinesRequest.includeNlpData(this.includeNlpData);
            latestHeadlinesRequest.hasNlp(this.hasNlp);
            latestHeadlinesRequest.theme(this.theme);
            latestHeadlinesRequest.notTheme(this.notTheme);
            latestHeadlinesRequest.orGEntityName(this.orGEntityName);
            latestHeadlinesRequest.peREntityName(this.peREntityName);
            latestHeadlinesRequest.loCEntityName(this.loCEntityName);
            latestHeadlinesRequest.miSCEntityName(this.miSCEntityName);
            latestHeadlinesRequest.titleSentimentMin(this.titleSentimentMin);
            latestHeadlinesRequest.titleSentimentMax(this.titleSentimentMax);
            latestHeadlinesRequest.contentSentimentMin(this.contentSentimentMin);
            latestHeadlinesRequest.contentSentimentMax(this.contentSentimentMax);
            latestHeadlinesRequest.iptcTags(this.iptcTags);
            latestHeadlinesRequest.notIptcTags(this.notIptcTags);
            return latestHeadlinesRequest;
        }

        /**
         * Execute post request
         * @return CSLHResponse1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public CSLHResponse1 execute() throws ApiException {
            LatestHeadlinesRequest latestHeadlinesRequest = buildBodyParams();
            ApiResponse<CSLHResponse1> localVarResp = postWithHttpInfo(latestHeadlinesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute post request with HTTP info returned
         * @return ApiResponse&lt;CSLHResponse1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CSLHResponse1> executeWithHttpInfo() throws ApiException {
            LatestHeadlinesRequest latestHeadlinesRequest = buildBodyParams();
            return postWithHttpInfo(latestHeadlinesRequest);
        }

        /**
         * Execute post request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CSLHResponse1> _callback) throws ApiException {
            LatestHeadlinesRequest latestHeadlinesRequest = buildBodyParams();
            return postAsync(latestHeadlinesRequest, _callback);
        }
    }

    /**
     * [Post] Search For Latest Headlines Request
     * This endpoint allows you to get latest headlines. You need to specify since when you want to get the latest headlines. You can also filter by language, country, source, and more.
     * @param latestHeadlinesRequest  (required)
     * @return PostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public PostRequestBuilder post() throws IllegalArgumentException {
        return new PostRequestBuilder();
    }
}
