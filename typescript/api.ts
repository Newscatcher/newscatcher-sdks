/* tslint:disable */
/* eslint-disable */
/**
 * NewsCatcher News API V2
 * NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we\'re like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: team@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ArticleInner
 */
export interface ArticleInner {
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'published_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'published_date_precision'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'link'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'clean_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'excerpt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'rights'?: string;
    /**
     * 
     * @type {number}
     * @memberof ArticleInner
     */
    'rank'?: number;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'topic'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'language'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'authors'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ArticleInner
     */
    'is_opinion'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    'twitter_account'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ArticleInner
     */
    '_score'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ArticleInner
     */
    '_id'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {ErrorStatus}
     * @memberof ErrorResponse
     */
    'status'?: ErrorStatus;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ErrorStatus = {
    Error: 'error',
    NoMatchesForYourSearch: 'No matches for your search.'
} as const;

export type ErrorStatus = typeof ErrorStatus[keyof typeof ErrorStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const Lang = {
    Af: 'af',
    Ar: 'ar',
    Bg: 'bg',
    Bn: 'bn',
    Ca: 'ca',
    Cn: 'cn',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    El: 'el',
    En: 'en',
    Es: 'es',
    Et: 'et',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Gu: 'gu',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hu: 'hu',
    Id: 'id',
    It: 'it',
    Ja: 'ja',
    Kn: 'kn',
    Ko: 'ko',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mr: 'mr',
    Ne: 'ne',
    Nl: 'nl',
    False: 'false',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    So: 'so',
    Sq: 'sq',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Th: 'th',
    Tl: 'tl',
    Tr: 'tr',
    Tw: 'tw',
    Uk: 'uk',
    Ur: 'ur',
    Vi: 'vi'
} as const;

export type Lang = typeof Lang[keyof typeof Lang];


/**
 * 
 * @export
 * @interface LatestHeadlines
 */
export interface LatestHeadlines {
    /**
     * The time period you want to get the headlines for. Accpeted format: - `7d` -> Daily form, last 7 days time period - `6h` -> Hourly form, last six hours 
     * @type {string}
     * @memberof LatestHeadlines
     */
    'when'?: string;
    /**
     * The language you want to search in.
     * @type {string}
     * @memberof LatestHeadlines
     */
    'lang'?: LatestHeadlinesLangEnum;
    /**
     * 
     * @type {string}
     * @memberof LatestHeadlines
     */
    'countries'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestHeadlines
     */
    'not_countries'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestHeadlines
     */
    'topic'?: LatestHeadlinesTopicEnum;
    /**
     * 
     * @type {string}
     * @memberof LatestHeadlines
     */
    'sources'?: string;
    /**
     * 
     * @type {string}
     * @memberof LatestHeadlines
     */
    'not_sources'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LatestHeadlines
     */
    'ranked_only'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LatestHeadlines
     */
    'page_size'?: number;
    /**
     * 
     * @type {number}
     * @memberof LatestHeadlines
     */
    'page'?: number;
}

export const LatestHeadlinesLangEnum = {
    Af: 'af',
    Ar: 'ar',
    Bg: 'bg',
    Bn: 'bn',
    Ca: 'ca',
    Cn: 'cn',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    El: 'el',
    En: 'en',
    Es: 'es',
    Et: 'et',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Gu: 'gu',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hu: 'hu',
    Id: 'id',
    It: 'it',
    Ja: 'ja',
    Kn: 'kn',
    Ko: 'ko',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mr: 'mr',
    Ne: 'ne',
    Nl: 'nl',
    False: 'false',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    So: 'so',
    Sq: 'sq',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Th: 'th',
    Tl: 'tl',
    Tr: 'tr',
    Tw: 'tw',
    Uk: 'uk',
    Ur: 'ur',
    Vi: 'vi'
} as const;

export type LatestHeadlinesLangEnum = typeof LatestHeadlinesLangEnum[keyof typeof LatestHeadlinesLangEnum];
export const LatestHeadlinesTopicEnum = {
    News: 'news',
    Sport: 'sport',
    Tech: 'tech',
    World: 'world',
    Finance: 'finance',
    Politics: 'politics',
    Business: 'business',
    Economics: 'economics',
    Entertainment: 'entertainment',
    Beauty: 'beauty',
    Travel: 'travel',
    Music: 'music',
    Food: 'food',
    Science: 'science',
    Gaming: 'gaming'
} as const;

export type LatestHeadlinesTopicEnum = typeof LatestHeadlinesTopicEnum[keyof typeof LatestHeadlinesTopicEnum];

/**
 * 
 * @export
 * @interface LatestHeadlinesUserInput
 */
export interface LatestHeadlinesUserInput {
    /**
     * 
     * @type {Array<string>}
     * @memberof LatestHeadlinesUserInput
     */
    'lang'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LatestHeadlinesUserInput
     */
    'not_lang'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LatestHeadlinesUserInput
     */
    'countries'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LatestHeadlinesUserInput
     */
    'not_countries'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof LatestHeadlinesUserInput
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof LatestHeadlinesUserInput
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof LatestHeadlinesUserInput
     */
    'sources'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LatestHeadlinesUserInput
     */
    'not_sources'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof LatestHeadlinesUserInput
     */
    'topic'?: string | null;
}
/**
 * 
 * @export
 * @interface Model200Response
 */
export interface Model200Response {
    /**
     * 
     * @type {SuccessStatus}
     * @memberof Model200Response
     */
    'status'?: SuccessStatus;
    /**
     * 
     * @type {number}
     * @memberof Model200Response
     */
    'total_hits'?: number;
    /**
     * 
     * @type {number}
     * @memberof Model200Response
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Model200Response
     */
    'total_pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof Model200Response
     */
    'page_size'?: number;
    /**
     * 
     * @type {Array<ArticleInner>}
     * @memberof Model200Response
     */
    'articles'?: Array<ArticleInner>;
    /**
     * 
     * @type {SearchUserInput}
     * @memberof Model200Response
     */
    'user_input'?: SearchUserInput;
}
/**
 * 
 * @export
 * @interface Model200ResponseLatest
 */
export interface Model200ResponseLatest {
    /**
     * 
     * @type {SuccessStatus}
     * @memberof Model200ResponseLatest
     */
    'status'?: SuccessStatus;
    /**
     * 
     * @type {number}
     * @memberof Model200ResponseLatest
     */
    'total_hits'?: number;
    /**
     * 
     * @type {number}
     * @memberof Model200ResponseLatest
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof Model200ResponseLatest
     */
    'total_pages'?: number;
    /**
     * 
     * @type {number}
     * @memberof Model200ResponseLatest
     */
    'page_size'?: number;
    /**
     * 
     * @type {Array<ArticleInner>}
     * @memberof Model200ResponseLatest
     */
    'articles'?: Array<ArticleInner>;
    /**
     * 
     * @type {LatestHeadlinesUserInput}
     * @memberof Model200ResponseLatest
     */
    'user_input'?: LatestHeadlinesUserInput;
}
/**
 * 
 * @export
 * @interface Model200ResponseSources
 */
export interface Model200ResponseSources {
    /**
     * 
     * @type {string}
     * @memberof Model200ResponseSources
     */
    'message'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Model200ResponseSources
     */
    'sources'?: Array<string> | null;
    /**
     * 
     * @type {SourcesUserInput}
     * @memberof Model200ResponseSources
     */
    'user_input'?: SourcesUserInput;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PublishDatePrecision = {
    Full: 'full',
    TimezoneUnknown: 'timezone unknown',
    Date: 'date'
} as const;

export type PublishDatePrecision = typeof PublishDatePrecision[keyof typeof PublishDatePrecision];


/**
 * 
 * @export
 * @interface Search
 */
export interface Search {
    /**
     * Keyword/keywords you\'re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section of the docs for more examples and explanations.
     * @type {string}
     * @memberof Search
     */
    'q'?: string;
    /**
     * The language you want to search in.
     * @type {string}
     * @memberof Search
     */
    'lang'?: SearchLangEnum;
    /**
     * Inverse to the lang parameter.
     * @type {string}
     * @memberof Search
     */
    'not_lang'?: SearchNotLangEnum;
    /**
     * Precision of the publication date.
     * @type {string}
     * @memberof Search
     */
    'published_date_precision'?: SearchPublishedDatePrecisionEnum;
    /**
     * YYYY/mm/dd From which point in time to start the search. The default timezone is UTC.  Defaults to the past week.
     * @type {string}
     * @memberof Search
     */
    'from'?: string;
    /**
     * YYYY/mm/dd Until which point in time to search for. The default timezone is UTC.
     * @type {string}
     * @memberof Search
     */
    'to'?: string;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'search_in'?: SearchSearchInEnum;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'countries'?: string;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'not_countries'?: string;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'topic'?: SearchTopicEnum;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'sources'?: string;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'not_sources'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Search
     */
    'ranked_only'?: boolean;
    /**
     * `[0:999999]` The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
     * @type {number}
     * @memberof Search
     */
    'from_rank'?: number;
    /**
     * `[0:999999]` The upper boundary of the rank of a news website to filter by. 
     * @type {number}
     * @memberof Search
     */
    'to_rank'?: number;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'sort_by'?: SearchSortByEnum;
    /**
     * 
     * @type {number}
     * @memberof Search
     */
    'page_size'?: number;
    /**
     * 
     * @type {number}
     * @memberof Search
     */
    'page'?: number;
}

export const SearchLangEnum = {
    Af: 'af',
    Ar: 'ar',
    Bg: 'bg',
    Bn: 'bn',
    Ca: 'ca',
    Cn: 'cn',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    El: 'el',
    En: 'en',
    Es: 'es',
    Et: 'et',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Gu: 'gu',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hu: 'hu',
    Id: 'id',
    It: 'it',
    Ja: 'ja',
    Kn: 'kn',
    Ko: 'ko',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mr: 'mr',
    Ne: 'ne',
    Nl: 'nl',
    False: 'false',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    So: 'so',
    Sq: 'sq',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Th: 'th',
    Tl: 'tl',
    Tr: 'tr',
    Tw: 'tw',
    Uk: 'uk',
    Ur: 'ur',
    Vi: 'vi'
} as const;

export type SearchLangEnum = typeof SearchLangEnum[keyof typeof SearchLangEnum];
export const SearchNotLangEnum = {
    Af: 'af',
    Ar: 'ar',
    Bg: 'bg',
    Bn: 'bn',
    Ca: 'ca',
    Cn: 'cn',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    El: 'el',
    En: 'en',
    Es: 'es',
    Et: 'et',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Gu: 'gu',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hu: 'hu',
    Id: 'id',
    It: 'it',
    Ja: 'ja',
    Kn: 'kn',
    Ko: 'ko',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mr: 'mr',
    Ne: 'ne',
    Nl: 'nl',
    False: 'false',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    So: 'so',
    Sq: 'sq',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Th: 'th',
    Tl: 'tl',
    Tr: 'tr',
    Tw: 'tw',
    Uk: 'uk',
    Ur: 'ur',
    Vi: 'vi'
} as const;

export type SearchNotLangEnum = typeof SearchNotLangEnum[keyof typeof SearchNotLangEnum];
export const SearchPublishedDatePrecisionEnum = {
    Full: 'full',
    TimezoneUnknown: 'timezone unknown',
    Date: 'date'
} as const;

export type SearchPublishedDatePrecisionEnum = typeof SearchPublishedDatePrecisionEnum[keyof typeof SearchPublishedDatePrecisionEnum];
export const SearchSearchInEnum = {
    Title: 'title',
    Summary: 'summary',
    TitleSummary: 'title_summary'
} as const;

export type SearchSearchInEnum = typeof SearchSearchInEnum[keyof typeof SearchSearchInEnum];
export const SearchTopicEnum = {
    News: 'news',
    Sport: 'sport',
    Tech: 'tech',
    World: 'world',
    Finance: 'finance',
    Politics: 'politics',
    Business: 'business',
    Economics: 'economics',
    Entertainment: 'entertainment',
    Beauty: 'beauty',
    Travel: 'travel',
    Music: 'music',
    Food: 'food',
    Science: 'science',
    Gaming: 'gaming'
} as const;

export type SearchTopicEnum = typeof SearchTopicEnum[keyof typeof SearchTopicEnum];
export const SearchSortByEnum = {
    Relevancy: 'relevancy',
    Date: 'date',
    Rank: 'rank'
} as const;

export type SearchSortByEnum = typeof SearchSortByEnum[keyof typeof SearchSortByEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const SearchIn = {
    Title: 'title',
    Summary: 'summary',
    TitleSummary: 'title_summary'
} as const;

export type SearchIn = typeof SearchIn[keyof typeof SearchIn];


/**
 * 
 * @export
 * @interface SearchUserInput
 */
export interface SearchUserInput {
    /**
     * 
     * @type {string}
     * @memberof SearchUserInput
     */
    'q'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserInput
     */
    'search_in'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserInput
     */
    'lang'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserInput
     */
    'not_lang'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserInput
     */
    'countries'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserInput
     */
    'not_countries'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof SearchUserInput
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchUserInput
     */
    'to'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SearchUserInput
     */
    'ranked_only'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchUserInput
     */
    'from_rank'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SearchUserInput
     */
    'to_rank'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SearchUserInput
     */
    'sort_by'?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchUserInput
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchUserInput
     */
    'size'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserInput
     */
    'sources'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SearchUserInput
     */
    'not_sources'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof SearchUserInput
     */
    'topic'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SearchUserInput
     */
    'published_date_precision'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SortBy = {
    Relevancy: 'relevancy',
    Date: 'date',
    Rank: 'rank'
} as const;

export type SortBy = typeof SortBy[keyof typeof SortBy];


/**
 * 
 * @export
 * @interface SourcesQuery
 */
export interface SourcesQuery {
    /**
     * The language you want to search in.
     * @type {string}
     * @memberof SourcesQuery
     */
    'lang'?: SourcesQueryLangEnum;
    /**
     * 
     * @type {string}
     * @memberof SourcesQuery
     */
    'countries'?: string;
    /**
     * 
     * @type {string}
     * @memberof SourcesQuery
     */
    'topic'?: SourcesQueryTopicEnum;
}

export const SourcesQueryLangEnum = {
    Af: 'af',
    Ar: 'ar',
    Bg: 'bg',
    Bn: 'bn',
    Ca: 'ca',
    Cn: 'cn',
    Cs: 'cs',
    Cy: 'cy',
    Da: 'da',
    De: 'de',
    El: 'el',
    En: 'en',
    Es: 'es',
    Et: 'et',
    Fa: 'fa',
    Fi: 'fi',
    Fr: 'fr',
    Gu: 'gu',
    He: 'he',
    Hi: 'hi',
    Hr: 'hr',
    Hu: 'hu',
    Id: 'id',
    It: 'it',
    Ja: 'ja',
    Kn: 'kn',
    Ko: 'ko',
    Lt: 'lt',
    Lv: 'lv',
    Mk: 'mk',
    Ml: 'ml',
    Mr: 'mr',
    Ne: 'ne',
    Nl: 'nl',
    False: 'false',
    Pa: 'pa',
    Pl: 'pl',
    Pt: 'pt',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    So: 'so',
    Sq: 'sq',
    Sv: 'sv',
    Sw: 'sw',
    Ta: 'ta',
    Te: 'te',
    Th: 'th',
    Tl: 'tl',
    Tr: 'tr',
    Tw: 'tw',
    Uk: 'uk',
    Ur: 'ur',
    Vi: 'vi'
} as const;

export type SourcesQueryLangEnum = typeof SourcesQueryLangEnum[keyof typeof SourcesQueryLangEnum];
export const SourcesQueryTopicEnum = {
    News: 'news',
    Sport: 'sport',
    Tech: 'tech',
    World: 'world',
    Finance: 'finance',
    Politics: 'politics',
    Business: 'business',
    Economics: 'economics',
    Entertainment: 'entertainment',
    Beauty: 'beauty',
    Travel: 'travel',
    Music: 'music',
    Food: 'food',
    Science: 'science',
    Gaming: 'gaming'
} as const;

export type SourcesQueryTopicEnum = typeof SourcesQueryTopicEnum[keyof typeof SourcesQueryTopicEnum];

/**
 * 
 * @export
 * @interface SourcesUserInput
 */
export interface SourcesUserInput {
    /**
     * 
     * @type {Array<string>}
     * @memberof SourcesUserInput
     */
    'lang'?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SourcesUserInput
     */
    'countries'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof SourcesUserInput
     */
    'topic'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SuccessStatus = {
    Ok: 'ok',
    NoMatchesForYourSearch: 'No matches for your search.'
} as const;

export type SuccessStatus = typeof SuccessStatus[keyof typeof SuccessStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const Topic = {
    News: 'news',
    Sport: 'sport',
    Tech: 'tech',
    World: 'world',
    Finance: 'finance',
    Politics: 'politics',
    Business: 'business',
    Economics: 'economics',
    Entertainment: 'entertainment',
    Beauty: 'beauty',
    Travel: 'travel',
    Music: 'music',
    Food: 'food',
    Science: 'science',
    Gaming: 'gaming'
} as const;

export type Topic = typeof Topic[keyof typeof Topic];



/**
 * LatestHeadlinesApi - axios parameter creator
 * @export
 */
export const LatestHeadlinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the latest headlines given any topic, country, or language.
         * @summary Get Latest News Articles
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
         * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
         * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
         * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
         * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, pageSize?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/latest_headlines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (notLang !== undefined) {
                localVarQueryParameter['not_lang'] = notLang;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (notCountries !== undefined) {
                localVarQueryParameter['not_countries'] = notCountries;
            }

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            if (notSources !== undefined) {
                localVarQueryParameter['not_sources'] = notSources;
            }

            if (rankedOnly !== undefined) {
                localVarQueryParameter['ranked_only'] = rankedOnly;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the latest headlines given any topic, country, or language.
         * @summary Get Latest News Articles
         * @param {LatestHeadlines} [latestHeadlines] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (latestHeadlines?: LatestHeadlines, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/latest_headlines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(latestHeadlines, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LatestHeadlinesApi - functional programming interface
 * @export
 */
export const LatestHeadlinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LatestHeadlinesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the latest headlines given any topic, country, or language.
         * @summary Get Latest News Articles
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
         * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
         * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
         * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
         * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, pageSize?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model200ResponseLatest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(lang, notLang, countries, notCountries, topic, sources, notSources, rankedOnly, pageSize, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the latest headlines given any topic, country, or language.
         * @summary Get Latest News Articles
         * @param {LatestHeadlines} [latestHeadlines] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(latestHeadlines?: LatestHeadlines, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model200ResponseLatest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(latestHeadlines, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LatestHeadlinesApi - factory interface
 * @export
 */
export const LatestHeadlinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LatestHeadlinesApiFp(configuration)
    return {
        /**
         * Get the latest headlines given any topic, country, or language.
         * @summary Get Latest News Articles
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
         * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
         * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
         * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
         * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, pageSize?: number, page?: number, options?: any): AxiosPromise<Model200ResponseLatest> {
            return localVarFp.get(lang, notLang, countries, notCountries, topic, sources, notSources, rankedOnly, pageSize, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the latest headlines given any topic, country, or language.
         * @summary Get Latest News Articles
         * @param {LatestHeadlines} [latestHeadlines] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(latestHeadlines?: LatestHeadlines, options?: any): AxiosPromise<Model200ResponseLatest> {
            return localVarFp.post(latestHeadlines, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LatestHeadlinesApi - object-oriented interface
 * @export
 * @class LatestHeadlinesApi
 * @extends {BaseAPI}
 */
export class LatestHeadlinesApi extends BaseAPI {
    /**
     * Get the latest headlines given any topic, country, or language.
     * @summary Get Latest News Articles
     * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
     * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
     * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
     * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
     * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
     * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
     * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
     * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
     * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
     * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LatestHeadlinesApi
     */
    public get(lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, pageSize?: number, page?: number, options?: AxiosRequestConfig) {
        return LatestHeadlinesApiFp(this.configuration).get(lang, notLang, countries, notCountries, topic, sources, notSources, rankedOnly, pageSize, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the latest headlines given any topic, country, or language.
     * @summary Get Latest News Articles
     * @param {LatestHeadlines} [latestHeadlines] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LatestHeadlinesApi
     */
    public post(latestHeadlines?: LatestHeadlines, options?: AxiosRequestConfig) {
        return LatestHeadlinesApiFp(this.configuration).post(latestHeadlines, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
         * @summary Search for specific news articles
         * @param {string} q Keyword/keywords you\&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section below of the docs for more examples and explanations 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
         * @param {PublishDatePrecision} [publishedDatePrecision] There are 3 types of date precision we define: &#x60;full&#x60; — day and time of an article is correctly identified with the appropriate timezone &#x60;timezone unknown&#x60; — day and time of an article is correctly identified without timezone &#x60;date&#x60; — only the day is identified without an exact time 
         * @param {string} [from] &#x60;YYYY/mm/dd&#x60; From which point in time to start the search. The default timezone is UTC. Defaults to the past week. 
         * @param {string} [to] &#x60;YYYY/mm/dd&#x60; Until which point in time to search for. The default timezone is UTC. 
         * @param {SearchIn} [searchIn] By default, we search what you specified in the &#x60;q&#x60; parameter in both &#x60;title&#x60; and &#x60;summary&#x60; of the article. However, you can limit this to either &#x60;title&#x60; or &#x60;summary&#x60; 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
         * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
         * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
         * @param {number} [fromRank] &#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
         * @param {number} [toRank] &#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. 
         * @param {SortBy} [sortBy] &#x60;relevancy&#x60; (default value) — the most relevant results first &#x60;date&#x60; — the most recently published results first &#x60;rank&#x60; — the results from the highest-ranked sources first 
         * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
         * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (q: string, lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', publishedDatePrecision?: PublishDatePrecision, from?: string, to?: string, searchIn?: SearchIn, countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, fromRank?: number, toRank?: number, sortBy?: SortBy, pageSize?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('get', 'q', q)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (notLang !== undefined) {
                localVarQueryParameter['not_lang'] = notLang;
            }

            if (publishedDatePrecision !== undefined) {
                localVarQueryParameter['published_date_precision'] = publishedDatePrecision;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (searchIn !== undefined) {
                localVarQueryParameter['search_in'] = searchIn;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (notCountries !== undefined) {
                localVarQueryParameter['not_countries'] = notCountries;
            }

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            if (notSources !== undefined) {
                localVarQueryParameter['not_sources'] = notSources;
            }

            if (rankedOnly !== undefined) {
                localVarQueryParameter['ranked_only'] = rankedOnly;
            }

            if (fromRank !== undefined) {
                localVarQueryParameter['from_rank'] = fromRank;
            }

            if (toRank !== undefined) {
                localVarQueryParameter['to_rank'] = toRank;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
         * @summary Search for specific news articles
         * @param {Search} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (search?: Search, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(search, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
         * @summary Search for specific news articles
         * @param {string} q Keyword/keywords you\&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section below of the docs for more examples and explanations 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
         * @param {PublishDatePrecision} [publishedDatePrecision] There are 3 types of date precision we define: &#x60;full&#x60; — day and time of an article is correctly identified with the appropriate timezone &#x60;timezone unknown&#x60; — day and time of an article is correctly identified without timezone &#x60;date&#x60; — only the day is identified without an exact time 
         * @param {string} [from] &#x60;YYYY/mm/dd&#x60; From which point in time to start the search. The default timezone is UTC. Defaults to the past week. 
         * @param {string} [to] &#x60;YYYY/mm/dd&#x60; Until which point in time to search for. The default timezone is UTC. 
         * @param {SearchIn} [searchIn] By default, we search what you specified in the &#x60;q&#x60; parameter in both &#x60;title&#x60; and &#x60;summary&#x60; of the article. However, you can limit this to either &#x60;title&#x60; or &#x60;summary&#x60; 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
         * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
         * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
         * @param {number} [fromRank] &#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
         * @param {number} [toRank] &#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. 
         * @param {SortBy} [sortBy] &#x60;relevancy&#x60; (default value) — the most relevant results first &#x60;date&#x60; — the most recently published results first &#x60;rank&#x60; — the results from the highest-ranked sources first 
         * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
         * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(q: string, lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', publishedDatePrecision?: PublishDatePrecision, from?: string, to?: string, searchIn?: SearchIn, countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, fromRank?: number, toRank?: number, sortBy?: SortBy, pageSize?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(q, lang, notLang, publishedDatePrecision, from, to, searchIn, countries, notCountries, topic, sources, notSources, rankedOnly, fromRank, toRank, sortBy, pageSize, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
         * @summary Search for specific news articles
         * @param {Search} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(search?: Search, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
         * @summary Search for specific news articles
         * @param {string} q Keyword/keywords you\&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section below of the docs for more examples and explanations 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
         * @param {PublishDatePrecision} [publishedDatePrecision] There are 3 types of date precision we define: &#x60;full&#x60; — day and time of an article is correctly identified with the appropriate timezone &#x60;timezone unknown&#x60; — day and time of an article is correctly identified without timezone &#x60;date&#x60; — only the day is identified without an exact time 
         * @param {string} [from] &#x60;YYYY/mm/dd&#x60; From which point in time to start the search. The default timezone is UTC. Defaults to the past week. 
         * @param {string} [to] &#x60;YYYY/mm/dd&#x60; Until which point in time to search for. The default timezone is UTC. 
         * @param {SearchIn} [searchIn] By default, we search what you specified in the &#x60;q&#x60; parameter in both &#x60;title&#x60; and &#x60;summary&#x60; of the article. However, you can limit this to either &#x60;title&#x60; or &#x60;summary&#x60; 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
         * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
         * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
         * @param {number} [fromRank] &#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
         * @param {number} [toRank] &#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. 
         * @param {SortBy} [sortBy] &#x60;relevancy&#x60; (default value) — the most relevant results first &#x60;date&#x60; — the most recently published results first &#x60;rank&#x60; — the results from the highest-ranked sources first 
         * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
         * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(q: string, lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', publishedDatePrecision?: PublishDatePrecision, from?: string, to?: string, searchIn?: SearchIn, countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, fromRank?: number, toRank?: number, sortBy?: SortBy, pageSize?: number, page?: number, options?: any): AxiosPromise<Model200Response> {
            return localVarFp.get(q, lang, notLang, publishedDatePrecision, from, to, searchIn, countries, notCountries, topic, sources, notSources, rankedOnly, fromRank, toRank, sortBy, pageSize, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
         * @summary Search for specific news articles
         * @param {Search} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(search?: Search, options?: any): AxiosPromise<Model200Response> {
            return localVarFp.post(search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
     * @summary Search for specific news articles
     * @param {string} q Keyword/keywords you\&#39;re searching for. This is the most important part of your query. Please, refer to the **Advanced Query Parameter** section below of the docs for more examples and explanations 
     * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
     * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [notLang] Inverse to the &#x60;lang&#x60; parameter 
     * @param {PublishDatePrecision} [publishedDatePrecision] There are 3 types of date precision we define: &#x60;full&#x60; — day and time of an article is correctly identified with the appropriate timezone &#x60;timezone unknown&#x60; — day and time of an article is correctly identified without timezone &#x60;date&#x60; — only the day is identified without an exact time 
     * @param {string} [from] &#x60;YYYY/mm/dd&#x60; From which point in time to start the search. The default timezone is UTC. Defaults to the past week. 
     * @param {string} [to] &#x60;YYYY/mm/dd&#x60; Until which point in time to search for. The default timezone is UTC. 
     * @param {SearchIn} [searchIn] By default, we search what you specified in the &#x60;q&#x60; parameter in both &#x60;title&#x60; and &#x60;summary&#x60; of the article. However, you can limit this to either &#x60;title&#x60; or &#x60;summary&#x60; 
     * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
     * @param {string} [notCountries] The inverse of the &#x60;countries&#x60; parameter. 
     * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
     * @param {string} [sources] One or more news resources to filter your search. It should be the normal form of the URL, For example: &#x60;nytimes.com,theguardian.com&#x60; 
     * @param {string} [notSources] One or more sources to be excluded from the search. Comma-separated list. For example: &#x60;nytimes.com,cnn.com,wsj.com&#x60; 
     * @param {boolean} [rankedOnly] Default: &#x60;True&#x60; Limit the search only for the sources which are in the top 1 million online websites. Unranked sources are assigned a rank that equals &#x60;999999&#x60; 
     * @param {number} [fromRank] &#x60;[0:999999]&#x60; The lowest boundary of the rank of a news website to filter by. Important: lower rank means that a source is more popular 
     * @param {number} [toRank] &#x60;[0:999999]&#x60; The upper boundary of the rank of a news website to filter by. 
     * @param {SortBy} [sortBy] &#x60;relevancy&#x60; (default value) — the most relevant results first &#x60;date&#x60; — the most recently published results first &#x60;rank&#x60; — the results from the highest-ranked sources first 
     * @param {number} [pageSize] &#x60;[1:100]&#x60; How many articles to return per page. 
     * @param {number} [page] The number of the page. Use it to scroll through the results. This parameter is used to paginate: scroll through results because one API response cannot return more than 100 articles. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public get(q: string, lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', notLang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', publishedDatePrecision?: PublishDatePrecision, from?: string, to?: string, searchIn?: SearchIn, countries?: string, notCountries?: string, topic?: Topic, sources?: string, notSources?: string, rankedOnly?: boolean, fromRank?: number, toRank?: number, sortBy?: SortBy, pageSize?: number, page?: number, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).get(q, lang, notLang, publishedDatePrecision, from, to, searchIn, countries, notCountries, topic, sources, notSources, rankedOnly, fromRank, toRank, sortBy, pageSize, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Main endpoint that allows you to find news article by keyword, date, language, country, etc.
     * @summary Search for specific news articles
     * @param {Search} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public post(search?: Search, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).post(search, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SourcesApi - axios parameter creator
 * @export
 */
export const SourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
         * @summary Get top news sources supported by NewsCatcher.
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, topic?: Topic, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (countries !== undefined) {
                localVarQueryParameter['countries'] = countries;
            }

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
         * @summary Get top news sources supported by NewsCatcher.
         * @param {SourcesQuery} [sourcesQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (sourcesQuery?: SourcesQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sourcesQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SourcesApi - functional programming interface
 * @export
 */
export const SourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
         * @summary Get top news sources supported by NewsCatcher.
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, topic?: Topic, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model200ResponseSources>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(lang, countries, topic, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
         * @summary Get top news sources supported by NewsCatcher.
         * @param {SourcesQuery} [sourcesQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(sourcesQuery?: SourcesQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model200ResponseSources>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(sourcesQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SourcesApi - factory interface
 * @export
 */
export const SourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SourcesApiFp(configuration)
    return {
        /**
         * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
         * @summary Get top news sources supported by NewsCatcher.
         * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
         * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
         * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, topic?: Topic, options?: any): AxiosPromise<Model200ResponseSources> {
            return localVarFp.get(lang, countries, topic, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
         * @summary Get top news sources supported by NewsCatcher.
         * @param {SourcesQuery} [sourcesQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(sourcesQuery?: SourcesQuery, options?: any): AxiosPromise<Model200ResponseSources> {
            return localVarFp.post(sourcesQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export class SourcesApi extends BaseAPI {
    /**
     * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
     * @summary Get top news sources supported by NewsCatcher.
     * @param {'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi'} [lang] Specifies the languages of the search. For example: &#x60;en&#x60;. The only accepted format is [ISO 639-1 — 2](https://en.wikipedia.org/wiki/ISO_639-1) letter code. 
     * @param {string} [countries] Countries where the news publisher is located. **Important**: This parameter is not responsible for the countries mentioned in the news article. One or multiple countries can be used in the search. The only acceptable format is [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) For example, &#x60;US,CA,MX&#x60; or just &#x60;US&#x60; 
     * @param {Topic} [topic] Accepted values: &#x60;news&#x60;, &#x60;sport&#x60;, &#x60;tech&#x60;, &#x60;world&#x60;, &#x60;finance&#x60;, &#x60;politics&#x60;, &#x60;business&#x60;, &#x60;economics&#x60;, &#x60;entertainment&#x60;, &#x60;beauty&#x60;, &#x60;travel&#x60;, &#x60;music&#x60;, &#x60;food&#x60;, &#x60;science&#x60;, &#x60;gaming&#x60; The topic to which you want to restrict the articles of your choice. Not all news articles are assigned with a topic, therefore, we cannot guarantee that 100% of topics talking about technology will be assigned a tech label. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public get(lang?: 'af' | 'ar' | 'bg' | 'bn' | 'ca' | 'cn' | 'cs' | 'cy' | 'da' | 'de' | 'el' | 'en' | 'es' | 'et' | 'fa' | 'fi' | 'fr' | 'gu' | 'he' | 'hi' | 'hr' | 'hu' | 'id' | 'it' | 'ja' | 'kn' | 'ko' | 'lt' | 'lv' | 'mk' | 'ml' | 'mr' | 'ne' | 'nl' | 'false' | 'pa' | 'pl' | 'pt' | 'ro' | 'ru' | 'sk' | 'sl' | 'so' | 'sq' | 'sv' | 'sw' | 'ta' | 'te' | 'th' | 'tl' | 'tr' | 'tw' | 'uk' | 'ur' | 'vi', countries?: string, topic?: Topic, options?: AxiosRequestConfig) {
        return SourcesApiFp(this.configuration).get(lang, countries, topic, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the top 100 supported news websites. Overall, we support over 60,000 websites. Using this endpoint, you may find the top 100 for your specific language, country, topic combination.
     * @summary Get top news sources supported by NewsCatcher.
     * @param {SourcesQuery} [sourcesQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    public post(sourcesQuery?: SourcesQuery, options?: AxiosRequestConfig) {
        return SourcesApiFp(this.configuration).post(sourcesQuery, options).then((request) => request(this.axios, this.basePath));
    }
}


