/**
 * NewsCatcher News API V2
 * NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we\'re like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: team@newscatcherapi.com
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import { AxiosPromise } from "axios";
import { Page, PageInfo, PageParameters } from "./Page";

export type PageRequest<
  Data extends PageInfo,
  Parameters extends PageParameters
> = (parameters: Parameters) => AxiosPromise<Data>;

export abstract class Pageable<
  Data extends PageInfo,
  Parameters extends PageParameters
> {
  readonly data: Data;
  private readonly initialParameters: Parameters;
  private readonly _request: PageRequest<Data, Parameters>;
  async previous(): Promise<Page<Data, Parameters> | null> {
    if (!this.hasPrevious()) return null;
    const response = await this.makeRequest(this.previousParameters());
    return this.withData(response.data);
  }
  async next(): Promise<Page<Data, Parameters> | null> {
    if (!this.hasNext()) return null;
    const response = await this.makeRequest(this.nextParameters());
    return this.withData(response.data);
  }

  protected abstract previousParameters(): PageParameters;
  protected abstract nextParameters(): PageParameters;
  abstract hasPrevious(): boolean;
  abstract hasNext(): boolean;

  /**
   * Helper for invoking a request
   */
  private makeRequest(parameters: PageParameters): AxiosPromise<Data> {
    return this._request({ ...this.initialParameters, ...parameters });
  }

  /**
   * Helper for creating new page
   */
  private withData(data: Data): Page<Data, Parameters> {
    return new Page({
      data,
      initialParameters: this.initialParameters,
      request: this._request,
    });
  }

  constructor({
    data,
    initialParameters,
    request,
  }: {
    data: Data;
    initialParameters: Parameters;
    request: PageRequest<Data, Parameters>;
  }) {
    this.data = data;
    this._request = request;
    this.initialParameters = initialParameters;
  }
}
