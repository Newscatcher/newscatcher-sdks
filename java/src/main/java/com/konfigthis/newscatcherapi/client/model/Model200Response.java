/*
 * NewsCatcher News API V2
 * NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: team@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.newscatcherapi.client.model.ArticleInner;
import com.konfigthis.newscatcherapi.client.model.SearchUserInput;
import com.konfigthis.newscatcherapi.client.model.SuccessStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.newscatcherapi.client.JSON;

/**
 * Model200Response
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Model200Response {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private SuccessStatus status;

  public static final String SERIALIZED_NAME_TOTAL_HITS = "total_hits";
  @SerializedName(SERIALIZED_NAME_TOTAL_HITS)
  private Integer totalHits;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "total_pages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Integer totalPages;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_ARTICLES = "articles";
  @SerializedName(SERIALIZED_NAME_ARTICLES)
  private List<ArticleInner> articles = null;

  public static final String SERIALIZED_NAME_USER_INPUT = "user_input";
  @SerializedName(SERIALIZED_NAME_USER_INPUT)
  private SearchUserInput userInput;

  public Model200Response() {
  }

  public Model200Response status(SuccessStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SuccessStatus getStatus() {
    return status;
  }


  public void setStatus(SuccessStatus status) {
    this.status = status;
  }


  public Model200Response totalHits(Integer totalHits) {
    
    this.totalHits = totalHits;
    return this;
  }

   /**
   * Get totalHits
   * @return totalHits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTotalHits() {
    return totalHits;
  }


  public void setTotalHits(Integer totalHits) {
    this.totalHits = totalHits;
  }


  public Model200Response page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    this.page = page;
  }


  public Model200Response totalPages(Integer totalPages) {
    
    this.totalPages = totalPages;
    return this;
  }

   /**
   * Get totalPages
   * @return totalPages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTotalPages() {
    return totalPages;
  }


  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }


  public Model200Response pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public Model200Response articles(List<ArticleInner> articles) {
    
    this.articles = articles;
    return this;
  }

  public Model200Response addArticlesItem(ArticleInner articlesItem) {
    if (this.articles == null) {
      this.articles = new ArrayList<>();
    }
    this.articles.add(articlesItem);
    return this;
  }

   /**
   * Get articles
   * @return articles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ArticleInner> getArticles() {
    return articles;
  }


  public void setArticles(List<ArticleInner> articles) {
    this.articles = articles;
  }


  public Model200Response userInput(SearchUserInput userInput) {
    
    this.userInput = userInput;
    return this;
  }

   /**
   * Get userInput
   * @return userInput
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SearchUserInput getUserInput() {
    return userInput;
  }


  public void setUserInput(SearchUserInput userInput) {
    this.userInput = userInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model200Response _200response = (Model200Response) o;
    return Objects.equals(this.status, _200response.status) &&
        Objects.equals(this.totalHits, _200response.totalHits) &&
        Objects.equals(this.page, _200response.page) &&
        Objects.equals(this.totalPages, _200response.totalPages) &&
        Objects.equals(this.pageSize, _200response.pageSize) &&
        Objects.equals(this.articles, _200response.articles) &&
        Objects.equals(this.userInput, _200response.userInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, totalHits, page, totalPages, pageSize, articles, userInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model200Response {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalHits: ").append(toIndentedString(totalHits)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    articles: ").append(toIndentedString(articles)).append("\n");
    sb.append("    userInput: ").append(toIndentedString(userInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("total_hits");
    openapiFields.add("page");
    openapiFields.add("total_pages");
    openapiFields.add("page_size");
    openapiFields.add("articles");
    openapiFields.add("user_input");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Model200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Model200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model200Response is not found in the empty JSON string", Model200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Model200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("articles") != null && !jsonObj.get("articles").isJsonNull()) {
        JsonArray jsonArrayarticles = jsonObj.getAsJsonArray("articles");
        if (jsonArrayarticles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("articles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `articles` to be an array in the JSON string but got `%s`", jsonObj.get("articles").toString()));
          }

          // validate the optional field `articles` (array)
          for (int i = 0; i < jsonArrayarticles.size(); i++) {
            ArticleInner.validateJsonObject(jsonArrayarticles.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `user_input`
      if (jsonObj.get("user_input") != null && !jsonObj.get("user_input").isJsonNull()) {
        SearchUserInput.validateJsonObject(jsonObj.getAsJsonObject("user_input"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Model200Response>() {
           @Override
           public void write(JsonWriter out, Model200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Model200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Model200Response
  * @throws IOException if the JSON string is invalid with respect to Model200Response
  */
  public static Model200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model200Response.class);
  }

 /**
  * Convert an instance of Model200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

