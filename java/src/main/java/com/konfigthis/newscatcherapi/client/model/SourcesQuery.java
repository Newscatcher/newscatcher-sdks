/*
 * NewsCatcher News API V2
 * NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: team@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.newscatcherapi.client.JSON;

/**
 * SourcesQuery
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SourcesQuery {
  /**
   * The language you want to search in.
   */
  @JsonAdapter(LangEnum.Adapter.class)
  public enum LangEnum {
    AF("af"),
    
    AR("ar"),
    
    BG("bg"),
    
    BN("bn"),
    
    CA("ca"),
    
    CN("cn"),
    
    CS("cs"),
    
    CY("cy"),
    
    DA("da"),
    
    DE("de"),
    
    EL("el"),
    
    EN("en"),
    
    ES("es"),
    
    ET("et"),
    
    FA("fa"),
    
    FI("fi"),
    
    FR("fr"),
    
    GU("gu"),
    
    HE("he"),
    
    HI("hi"),
    
    HR("hr"),
    
    HU("hu"),
    
    ID("id"),
    
    IT("it"),
    
    JA("ja"),
    
    KN("kn"),
    
    KO("ko"),
    
    LT("lt"),
    
    LV("lv"),
    
    MK("mk"),
    
    ML("ml"),
    
    MR("mr"),
    
    NE("ne"),
    
    NL("nl"),
    
    FALSE("false"),
    
    PA("pa"),
    
    PL("pl"),
    
    PT("pt"),
    
    RO("ro"),
    
    RU("ru"),
    
    SK("sk"),
    
    SL("sl"),
    
    SO("so"),
    
    SQ("sq"),
    
    SV("sv"),
    
    SW("sw"),
    
    TA("ta"),
    
    TE("te"),
    
    TH("th"),
    
    TL("tl"),
    
    TR("tr"),
    
    TW("tw"),
    
    UK("uk"),
    
    UR("ur"),
    
    VI("vi");

    private String value;

    LangEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LangEnum fromValue(String value) {
      for (LangEnum b : LangEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LangEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LangEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LangEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LangEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private LangEnum lang;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private String countries;

  /**
   * Gets or Sets topic
   */
  @JsonAdapter(TopicEnum.Adapter.class)
  public enum TopicEnum {
    NEWS("news"),
    
    SPORT("sport"),
    
    TECH("tech"),
    
    WORLD("world"),
    
    FINANCE("finance"),
    
    POLITICS("politics"),
    
    BUSINESS("business"),
    
    ECONOMICS("economics"),
    
    ENTERTAINMENT("entertainment"),
    
    BEAUTY("beauty"),
    
    TRAVEL("travel"),
    
    MUSIC("music"),
    
    FOOD("food"),
    
    SCIENCE("science"),
    
    GAMING("gaming");

    private String value;

    TopicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TopicEnum fromValue(String value) {
      for (TopicEnum b : TopicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TopicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TopicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TopicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TopicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private TopicEnum topic;

  public SourcesQuery() {
  }

  public SourcesQuery lang(LangEnum lang) {
    
    this.lang = lang;
    return this;
  }

   /**
   * The language you want to search in.
   * @return lang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "en", value = "The language you want to search in.")

  public LangEnum getLang() {
    return lang;
  }


  public void setLang(LangEnum lang) {
    this.lang = lang;
  }


  public SourcesQuery countries(String countries) {
    
    this.countries = countries;
    return this;
  }

   /**
   * Get countries
   * @return countries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "US,CA", value = "")

  public String getCountries() {
    return countries;
  }


  public void setCountries(String countries) {
    this.countries = countries;
  }


  public SourcesQuery topic(TopicEnum topic) {
    
    this.topic = topic;
    return this;
  }

   /**
   * Get topic
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "business", value = "")

  public TopicEnum getTopic() {
    return topic;
  }


  public void setTopic(TopicEnum topic) {
    this.topic = topic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourcesQuery sourcesQuery = (SourcesQuery) o;
    return Objects.equals(this.lang, sourcesQuery.lang) &&
        Objects.equals(this.countries, sourcesQuery.countries) &&
        Objects.equals(this.topic, sourcesQuery.topic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lang, countries, topic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourcesQuery {\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lang");
    openapiFields.add("countries");
    openapiFields.add("topic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SourcesQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SourcesQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourcesQuery is not found in the empty JSON string", SourcesQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SourcesQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourcesQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) && !jsonObj.get("countries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourcesQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourcesQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourcesQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourcesQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<SourcesQuery>() {
           @Override
           public void write(JsonWriter out, SourcesQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourcesQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SourcesQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SourcesQuery
  * @throws IOException if the JSON string is invalid with respect to SourcesQuery
  */
  public static SourcesQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourcesQuery.class);
  }

 /**
  * Convert an instance of SourcesQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

