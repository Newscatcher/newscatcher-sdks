/*
 * NewsCatcher News API V2
 * NewsCatcher is a data-as-a-service startup that has one main goal: to build the largest database of structured news articles published online. In other words, we're like Google for the news part of the web, which you can access as a source of data.  Some useful links: - [How NewsCatcher Works](https://docs.newscatcherapi.com/knowledge-base/how-newscatcher-works) - [GitHub for the Python SDK](https://github.com/NewscatcherAPI/newscatcherapi-sdk-python) 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: team@newscatcherapi.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.newscatcherapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.newscatcherapi.client.JSON;

/**
 * ArticleInner
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ArticleInner {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "published_date";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE_PRECISION = "published_date_precision";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE_PRECISION)
  private String publishedDatePrecision;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_CLEAN_URL = "clean_url";
  @SerializedName(SERIALIZED_NAME_CLEAN_URL)
  private String cleanUrl;

  public static final String SERIALIZED_NAME_EXCERPT = "excerpt";
  @SerializedName(SERIALIZED_NAME_EXCERPT)
  private String excerpt;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private String rights;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private String authors;

  public static final String SERIALIZED_NAME_IS_OPINION = "is_opinion";
  @SerializedName(SERIALIZED_NAME_IS_OPINION)
  private Boolean isOpinion;

  public static final String SERIALIZED_NAME_TWITTER_ACCOUNT = "twitter_account";
  @SerializedName(SERIALIZED_NAME_TWITTER_ACCOUNT)
  private String twitterAccount;

  public static final String SERIALIZED_NAME_SCORE = "_score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score;

  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public ArticleInner() {
  }

  public ArticleInner title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ArticleInner author(String author) {
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthor() {
    return author;
  }


  public void setAuthor(String author) {
    this.author = author;
  }


  public ArticleInner publishedDate(String publishedDate) {
    
    this.publishedDate = publishedDate;
    return this;
  }

   /**
   * Get publishedDate
   * @return publishedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPublishedDate() {
    return publishedDate;
  }


  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public ArticleInner publishedDatePrecision(String publishedDatePrecision) {
    
    this.publishedDatePrecision = publishedDatePrecision;
    return this;
  }

   /**
   * Get publishedDatePrecision
   * @return publishedDatePrecision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPublishedDatePrecision() {
    return publishedDatePrecision;
  }


  public void setPublishedDatePrecision(String publishedDatePrecision) {
    this.publishedDatePrecision = publishedDatePrecision;
  }


  public ArticleInner link(String link) {
    
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    this.link = link;
  }


  public ArticleInner cleanUrl(String cleanUrl) {
    
    this.cleanUrl = cleanUrl;
    return this;
  }

   /**
   * Get cleanUrl
   * @return cleanUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCleanUrl() {
    return cleanUrl;
  }


  public void setCleanUrl(String cleanUrl) {
    this.cleanUrl = cleanUrl;
  }


  public ArticleInner excerpt(String excerpt) {
    
    this.excerpt = excerpt;
    return this;
  }

   /**
   * Get excerpt
   * @return excerpt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExcerpt() {
    return excerpt;
  }


  public void setExcerpt(String excerpt) {
    this.excerpt = excerpt;
  }


  public ArticleInner summary(String summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    this.summary = summary;
  }


  public ArticleInner rights(String rights) {
    
    this.rights = rights;
    return this;
  }

   /**
   * Get rights
   * @return rights
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRights() {
    return rights;
  }


  public void setRights(String rights) {
    this.rights = rights;
  }


  public ArticleInner rank(Integer rank) {
    
    this.rank = rank;
    return this;
  }

   /**
   * Get rank
   * @return rank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRank() {
    return rank;
  }


  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public ArticleInner topic(String topic) {
    
    this.topic = topic;
    return this;
  }

   /**
   * Get topic
   * @return topic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTopic() {
    return topic;
  }


  public void setTopic(String topic) {
    this.topic = topic;
  }


  public ArticleInner country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public ArticleInner language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public ArticleInner authors(String authors) {
    
    this.authors = authors;
    return this;
  }

   /**
   * Get authors
   * @return authors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthors() {
    return authors;
  }


  public void setAuthors(String authors) {
    this.authors = authors;
  }


  public ArticleInner isOpinion(Boolean isOpinion) {
    
    this.isOpinion = isOpinion;
    return this;
  }

   /**
   * Get isOpinion
   * @return isOpinion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsOpinion() {
    return isOpinion;
  }


  public void setIsOpinion(Boolean isOpinion) {
    this.isOpinion = isOpinion;
  }


  public ArticleInner twitterAccount(String twitterAccount) {
    
    this.twitterAccount = twitterAccount;
    return this;
  }

   /**
   * Get twitterAccount
   * @return twitterAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTwitterAccount() {
    return twitterAccount;
  }


  public void setTwitterAccount(String twitterAccount) {
    this.twitterAccount = twitterAccount;
  }


  public ArticleInner score(BigDecimal score) {
    
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getScore() {
    return score;
  }


  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public ArticleInner id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleInner articleInner = (ArticleInner) o;
    return Objects.equals(this.title, articleInner.title) &&
        Objects.equals(this.author, articleInner.author) &&
        Objects.equals(this.publishedDate, articleInner.publishedDate) &&
        Objects.equals(this.publishedDatePrecision, articleInner.publishedDatePrecision) &&
        Objects.equals(this.link, articleInner.link) &&
        Objects.equals(this.cleanUrl, articleInner.cleanUrl) &&
        Objects.equals(this.excerpt, articleInner.excerpt) &&
        Objects.equals(this.summary, articleInner.summary) &&
        Objects.equals(this.rights, articleInner.rights) &&
        Objects.equals(this.rank, articleInner.rank) &&
        Objects.equals(this.topic, articleInner.topic) &&
        Objects.equals(this.country, articleInner.country) &&
        Objects.equals(this.language, articleInner.language) &&
        Objects.equals(this.authors, articleInner.authors) &&
        Objects.equals(this.isOpinion, articleInner.isOpinion) &&
        Objects.equals(this.twitterAccount, articleInner.twitterAccount) &&
        Objects.equals(this.score, articleInner.score) &&
        Objects.equals(this.id, articleInner.id);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, author, publishedDate, publishedDatePrecision, link, cleanUrl, excerpt, summary, rights, rank, topic, country, language, authors, isOpinion, twitterAccount, score, id);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleInner {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    publishedDatePrecision: ").append(toIndentedString(publishedDatePrecision)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    cleanUrl: ").append(toIndentedString(cleanUrl)).append("\n");
    sb.append("    excerpt: ").append(toIndentedString(excerpt)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    isOpinion: ").append(toIndentedString(isOpinion)).append("\n");
    sb.append("    twitterAccount: ").append(toIndentedString(twitterAccount)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("author");
    openapiFields.add("published_date");
    openapiFields.add("published_date_precision");
    openapiFields.add("link");
    openapiFields.add("clean_url");
    openapiFields.add("excerpt");
    openapiFields.add("summary");
    openapiFields.add("rights");
    openapiFields.add("rank");
    openapiFields.add("topic");
    openapiFields.add("country");
    openapiFields.add("language");
    openapiFields.add("authors");
    openapiFields.add("is_opinion");
    openapiFields.add("twitter_account");
    openapiFields.add("_score");
    openapiFields.add("_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ArticleInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ArticleInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleInner is not found in the empty JSON string", ArticleInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ArticleInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("published_date") != null && !jsonObj.get("published_date").isJsonNull()) && !jsonObj.get("published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date").toString()));
      }
      if ((jsonObj.get("published_date_precision") != null && !jsonObj.get("published_date_precision").isJsonNull()) && !jsonObj.get("published_date_precision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date_precision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date_precision").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("clean_url") != null && !jsonObj.get("clean_url").isJsonNull()) && !jsonObj.get("clean_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clean_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clean_url").toString()));
      }
      if (!jsonObj.get("excerpt").isJsonNull() && (jsonObj.get("excerpt") != null && !jsonObj.get("excerpt").isJsonNull()) && !jsonObj.get("excerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `excerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("excerpt").toString()));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) && !jsonObj.get("rights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rights").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("language").isJsonNull() && (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("authors") != null && !jsonObj.get("authors").isJsonNull()) && !jsonObj.get("authors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authors").toString()));
      }
      if (!jsonObj.get("twitter_account").isJsonNull() && (jsonObj.get("twitter_account") != null && !jsonObj.get("twitter_account").isJsonNull()) && !jsonObj.get("twitter_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_account").toString()));
      }
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleInner>() {
           @Override
           public void write(JsonWriter out, ArticleInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ArticleInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ArticleInner
  * @throws IOException if the JSON string is invalid with respect to ArticleInner
  */
  public static ArticleInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleInner.class);
  }

 /**
  * Convert an instance of ArticleInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

